
//MIT License

//Copyright (c) 2024 Dmitrii Sidorenko

//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:

//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.

//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//КодОтправителя = ""; 
	
	Если Метаданные.СервисыИнтеграции.Количество() > 0 Тогда 
		Для Каждого СервисИнтеграции Из Метаданные.СервисыИнтеграции Цикл 
			
			Элементы.Сервис.СписокВыбора.Добавить(СервисИнтеграции.Имя,СервисИнтеграции.Имя);
			
		КонецЦикла;	
		
		Если Элементы.Сервис.СписокВыбора.Количество() > 0 Тогда 
			
			Сервис = Элементы.Сервис.СписокВыбора[0];
			
	        СервисПриИзмененииНаСервере();
							
		КонецЕсли;	
	КонецЕсли;
	
	// Создаю параметр для описания сообщения
	новСтрока = ПараметрыСообщения.Добавить();
	новСтрока.Ключ 		= "ТипСообщения";
	новСтрока.Значение 	= "ОбменДанными";
	
	// Для того чтобы в параметрах было сведенье о размере тела сообщения:
	// Сообщение.Параметры.Вставить("РазмерСообщения", Буфер.Размер);
	ВключитьРазмерСообщения = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьОбработку(Команда) 
	
	ВыполнитьОбработкуНаСервере(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОстановитьОбработку(Команда)
	
	ОстановитьОбработкуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСообщение(Команда)
	
	Если ПустаяСтрока(Сервис)
		Или ПустаяСтрока(Канал) Тогда
		
		ЕстьОшибка 	= Истина;
		ТекстОшибки = "Заполните все поля"; 
		
	Иначе
		
		СтруктураПроверки = ПроверитьДоступностьСервиса(Сервис);
		ЕстьОшибка 	= СтруктураПроверки.ЕстьОшибка;
		ТекстОшибки = СтруктураПроверки.ТекстОшибки;
		
		Если Не ЕстьОшибка Тогда 
			ОтправитьСообщениеНаСервере();
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ТекстОшибки.Видимость = ЕстьОшибка;
	
КонецПроцедуры  

&НаСервере
Процедура ОтправитьСообщениеНаСервере()
	
	//  Необязательный повторяет стандартное поведение:
	//	Устанавливаем дату устаревания создаваемого сообщения сервиса интеграции.
	//	Значение по умолчанию: "Текущая дата сеанса + 20 дней".
	Если Не ЗначениеЗаполнено(ДатаУстаревания) Тогда 
		ДатаУстаревания = ТекущаяДатаСеанса() + 20 * 86400;
	Иначе
		// Если дата меньше даты сеанса устанавливаем дату больше. Для избежании ошибки 
		Если ДатаУстаревания < ТекущаяДатаСеанса() Тогда 
			ДатаУстаревания = ТекущаяДатаСеанса() + 120; 	
		КонецЕсли;	
	КонецЕсли;
	
			
	Сообщение = СервисыИнтеграции[Сервис].СоздатьСообщение(ДатаУстаревания);
	
	масПолучатели = Новый Массив;
	Для Каждого текСтрока из Получатели Цикл 
		масПолучатели.Добавить(текСтрока.КодПолучателя);
	КонецЦикла;	
	
	//	Код участника интеграции, которому направляется сообщение.
	//	Принимает коды справочника участников, разделенные символом запятая (,). 
	//	Если получатели явно не указаны, сообщение будет направлено всем возможным получателям.
	Сообщение.КодПолучателя = СтрСоединить(масПолучатели, ",");
	// Код участника интеграции, который отправил сообщение. 
	Сообщение.КодОтправителя= КодОтправителя;
	
	Попытка
		Сообщение.ИдентификаторСообщенияЗапроса = Новый УникальныйИдентификатор(ИдентификаторЗапроса);
	Исключение
	    ИдентификаторЗапроса = "00000000-0000-0000-0000-000000000000";
	КонецПопытки;
	
	Тело = Сообщение.ПолучитьТелоКакПоток();
	
	Буфер = ПолучитьБуферДвоичныхДанныхИзСтроки(ТекстСообщения);
	Тело.Записать(Буфер, 0, Буфер.Размер);
	Тело.Закрыть();
	
	// С платформы 8.3.21 этот кусок необязателен, так как было добавлено свойство РазмерТела
	// Это свойство делает тоже самое но автоматически    
	Если ВключитьРазмерСообщения Тогда 
		Сообщение.Параметры.Вставить("РазмерСообщения", Буфер.Размер);
	КонецЕсли;
	
	Для Каждого текСтрока Из ПараметрыСообщения Цикл 
		
		Сообщение.Параметры.Вставить(текСтрока.Ключ, текСтрока.Значение);
		
	КонецЦикла;	
			
	СервисыИнтеграции[Сервис][Канал].ОтправитьСообщение(Сообщение);	
		
КонецПроцедуры     


&НаКлиенте
Процедура СервисПриИзменении(Элемент)
	
	СервисПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СервисПриИзмененииНаСервере()
	
	Если Элементы.Канал.СписокВыбора.Количество() > 0 Тогда
		
		Элементы.Канал.СписокВыбора.Очистить();
		
	КонецЕсли;
	
	текСервис = Метаданные.СервисыИнтеграции.Найти(Сервис);
			
	Если текСервис <> Неопределено Тогда 
				
		КаналаСервисаИнтеграцииОтправка = Метаданные.СвойстваОбъектов.НаправлениеСообщенияКаналаСервисаИнтеграции.Отправка;
		Для Каждого текКаналСервиса Из текСервис.КаналыСервисаИнтеграции Цикл 
					
			Если текКаналСервиса.НаправлениеСообщения = КаналаСервисаИнтеграцииОтправка Тогда 
						
				Элементы.Канал.СписокВыбора.Добавить(текКаналСервиса.Имя, текКаналСервиса.Имя);				
						
			КонецЕсли;
					
		КонецЦикла;
				
		Если Элементы.Канал.СписокВыбора.Количество() > 0 Тогда 
					
			Канал = Элементы.Канал.СписокВыбора[0];
					
		КонецЕсли;
				
	КонецЕсли;
			
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьДоступностьСервиса(Сервис)
	
	Результат = Новый Структура("ЕстьОшибка, ТекстОшибки", Ложь, "");
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;
	
	АктивностьСервиса = СервисыИнтеграции[Сервис].ПолучитьАктивность();
	
	Если Не АктивностьСервиса Тогда 
		
		Результат.ЕстьОшибка = Истина;
		Результат.ТекстОшибки = "Сервис интеграции """+Сервис+""" неактивен";
		
	КонецЕсли;	
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;

	Возврат Результат;
	
КонецФункции      

&НаСервереБезКонтекста
Процедура ВыполнитьОбработкуНаСервере()
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;	

	СервисыИнтеграции.ВыполнитьОбработку();  
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОстановитьОбработкуНаСервере()
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;	

	СервисыИнтеграции.ОстановитьОбработку();  
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;

КонецПроцедуры


#КонецОбласти



