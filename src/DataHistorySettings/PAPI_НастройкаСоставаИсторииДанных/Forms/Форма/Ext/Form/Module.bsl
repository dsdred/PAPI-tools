#Область License

//MIT License

//Copyright (c) 2024 Dmitrii Sidorenko

//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:

//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.

//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.

#КонецОбласти

#Область ОбьявленияПеременных

&НаКлиенте
Перем ФормаПрогресса; 

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)  
	
	ПолноеИмяОбработки = РеквизитФормыВЗначение("Объект").Метаданные().ПолноеИмя();
	
	// Код в области ОтладкаОбработки
	РежимОтладки = Ложь;
	
	ВПривилегированномРежиме = Истина;
	
	// Проверка пригодности платформы
	СтруктураПроверки = ЭтотОбъект().ТекущаяВерсияПлатформы();
	Если СтруктураПроверки.Отработал Тогда 
		ЕстьОшибка 		= Ложь;
		ВерсияПлатформы = СтруктураПроверки.Результат;
	Иначе 
		ЕстьОшибка 	= Истина;
		ТекстОшибки = СтруктураПроверки.ТекстОшибки;
	КонецЕсли;	
		
	ЗагрузитьМетаданныеВДеревоМетаданных();
		
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьМетаданныеВДеревоМетаданных()
	
	Элементы.ТекстОшибки.Видимость = ЕстьОшибка;
	Если Не ЕстьОшибка Тогда
		
		// Виды данных доступных в Истории данных текущей платформы
		Если ЗначениеЗаполнено(СписокМетаданныхТекущейВерсии) Тогда 
			СписокМетаданныхТекущейВерсии.Очистить();
		КонецЕсли;	
		
		
		// Получаем список объектов используемых в истории данных
		СписокОбъектовИИ = ЭтотОбъект().СписокОбъектовМетаданных(ВерсияПлатформы);
		
		// Используется история изменений. Применяется при построении первоначального дерева.
		ИспользованиеИсторииДанныхВключено = Метаданные.СвойстваОбъектов.ИспользованиеИсторииДанных.Использовать;   
			
		// Структура дерева
		перСписокМетаданных = НовоеДеревоМетаданных();
		
		Для Каждого СтрокаСпискаОбъектов Из СписокОбъектовИИ Цикл 
			
			// Заполняем список объектов используемых в истории данных  
			// Ключ ObjectName для eng
			СписокМетаданныхТекущейВерсии.Добавить(СтрокаСпискаОбъектов.Значение.ИмяОбъекта,
													СтрокаСпискаОбъектов.Значение.ObjectName);
			
			ВерхнийУровеньДерева 					= перСписокМетаданных.Строки.Добавить();	
			ВерхнийУровеньДерева.Пометка			= 1;	
			ВерхнийУровеньДерева.Имя				= СтрокаСпискаОбъектов.Значение.ИмяОбъекта;
			ВерхнийУровеньДерева.Синоним            = СтрокаСпискаОбъектов.Значение.ИмяОбъекта;
			ВерхнийУровеньДерева.ПолноеИмя			= "";	
			ВерхнийУровеньДерева.ДанныеПоиска		= СтрокаСпискаОбъектов.Значение.ДанныеПоиска;
			
			ВерхнийУровеньДерева.ВключеноВКонфигураторе = 3; // пустая иконка
			ВерхнийУровеньДерева.ИндексКартинки     	= СтрокаСпискаОбъектов.Значение.НомерКартинки;
			
			ВерхнийУровеньДерева.ИспользованиеПолей = 0;
			
			ВсегоПодчиненные = Метаданные[ВерхнийУровеньДерева.Имя].Количество(); 
			
			Если ВсегоПодчиненные = 0 Тогда 
				МассивДанныеПоиска = Новый Массив;
			Иначе 
				МассивДанныеПоиска = СтрРазделить(СтрокаСпискаОбъектов.Значение.ДанныеПоиска, ",", Ложь);
			КонецЕсли;	
			
			ВсегоПомеченныеПодчиненных = 0;
			Для Каждого ОбъектМетаданных Из Метаданные[ВерхнийУровеньДерева.Имя] Цикл
							
				ПодчиненныйУровеньДерева 			= ВерхнийУровеньДерева.Строки.Добавить();
				ПодчиненныйУровеньДерева.Имя		= ОбъектМетаданных.Имя;
				ПодчиненныйУровеньДерева.Синоним    = ?(НЕ ПустаяСтрока(ОбъектМетаданных.Синоним), ОбъектМетаданных.Синоним, ОбъектМетаданных.Имя);
				ПодчиненныйУровеньДерева.ПолноеИмя 	= ВерхнийУровеньДерева.Имя + "." + ОбъектМетаданных.Имя;
				
				ПодчиненныйУровеньДерева.ВключеноВКонфигураторе = ОбъектМетаданных.ИсторияДанных = ИспользованиеИсторииДанныхВключено;
				
				// Получаем программные настройки 
				Если ВерхнийУровеньДерева.Имя = "ОбщиеРеквизиты" Тогда
					НастройкиИД = Неопределено;	
				Иначе	
					НастройкиИД = ИсторияДанных.ПолучитьНастройки(ОбъектМетаданных);
				КонецЕсли;	
					
					
				Если НастройкиИД = Неопределено Тогда 
					перПометка = ?(ОбъектМетаданных.ИсторияДанных = ИспользованиеИсторииДанныхВключено, 1, 0);
					СоответствиеРеквизитов = Новый Соответствие;
				Иначе
					перПометка 				= НастройкиИД.Использование;
					СоответствиеРеквизитов 	= НастройкиИД.ИспользованиеПолей;
					ПодчиненныйУровеньДерева.ИспользованиеПолей = ?(перПометка, 2, 1);
				КонецЕсли;	
							
				ПодчиненныйУровеньДерева.Пометка = перПометка;
				
				Если перПометка = 1 Тогда 
					ВсегоПомеченныеПодчиненных = ВсегоПомеченныеПодчиненных + 1;
				КонецЕсли;	
				
				ПодчиненныйУровеньДерева.ИндексКартинки = ВерхнийУровеньДерева.ИндексКартинки;	
					
				ЗаполнитьРеквизитыДереваМетаданных(ПодчиненныйУровеньДерева, ОбъектМетаданных, МассивДанныеПоиска, СоответствиеРеквизитов); 
							
			КонецЦикла;
			
			Если ВсегоПодчиненные = 0
				ИЛИ ВсегоПомеченныеПодчиненных = 0 Тогда 
				ВерхнийУровеньДерева.Пометка	= 0;		
			КонецЕсли;	
			
			Если ВсегоПодчиненные > 0
				И ВсегоПомеченныеПодчиненных > 0
				И ВсегоПодчиненные <> ВсегоПомеченныеПодчиненных Тогда 
				ВерхнийУровеньДерева.Пометка	= 2;		
			КонецЕсли;
			
		КонецЦикла;  
		
		ЗначениеВРеквизитФормы(перСписокМетаданных, "ДеревоМетаданных");   
		
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастройкиПоУмолчанию(Команда)
	
	НастройкиПоУмолчаниюНаСервере();  
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИзменения(Команда)
	
	СписокОбъектовИИ = ДеревоМетаданных.ПолучитьЭлементы();
	
	Для Каждого ВерхнийУровеньДерева Из СписокОбъектовИИ Цикл 
		
		НижнийУровеньДерева = ВерхнийУровеньДерева.ПолучитьЭлементы();	
		
		Для Каждого ТекущиеДанные Из НижнийУровеньДерева Цикл 
		
			ДеревоЗаписатьИзмененияПоСтроке(ВерхнийУровеньДерева, ТекущиеДанные);		
			
		КонецЦикла;
		
	КонецЦикла;
	
	
КонецПроцедуры 

&НаКлиенте
Процедура ПрочитатьЗаново(Команда)
	
	ЗагрузитьМетаданныеВДеревоМетаданных();

КонецПроцедуры


&НаКлиенте
Процедура ОчиститьИсторию(Команда)       
	
	ПараметрыЗапуска = Новый Структура("ПолнаяЧистка", Истина);
	ОповещениеПослеВыбораДаты = Новый ОписаниеОповещения("ПослеВыбораДаты", ЭтотОбъект, ПараметрыЗапуска);
	
	ИмяФормыВыбораДаты = ПолучитьИмяФормы("ВыборПроизвольнойДаты");
	Если ИмяФормыВыбораДаты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ТекущееСостояние", "Внимание! Будет очищена вся история по всем объектам до указанной даты!");
	ОткрытьФорму(ИмяФормыВыбораДаты, ПараметрыФормы,,,,, ОповещениеПослеВыбораДаты, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоМетаданных

&НаКлиенте
Процедура СписокМетаданныхПометкаПриИзменении(Элемент)
	
	ИзменениеПометки(Элементы.ДеревоМетаданных.ТекущаяСтрока);
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастройкиПоУмолчанию(Команда) 

	ТекущиеДанные = Элементы.ДеревоМетаданных.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда 
	
		ВерхнийУровеньДерева = ТекущиеДанные.ПолучитьРодителя();
		
		Если ВерхнийУровеньДерева <> Неопределено Тогда
			Если Не ПустаяСтрока(ТекущиеДанные.ПолноеИмя) Тогда 
				
				ИмяОбъектаРазделенное = СтрРазделить(ТекущиеДанные.ПолноеИмя, ".", Ложь);
			
				Если ИмяОбъектаРазделенное.Количество() = 2 Тогда 

					СброситьНастройкиУОбъекта(ИмяОбъектаРазделенное, ВПривилегированномРежиме);
					
					перПометка = ТекущиеДанные.ВключеноВКонфигураторе;	
					ТекущиеДанные.Пометка 				= перПометка;	
					ТекущиеДанные.ИспользованиеПолей 	= 0;
					
					Если Не ПустаяСтрока(ВерхнийУровеньДерева.ДанныеПоиска) Тогда 
					
						ПодчиненноеДеревоРеквизитов = ТекущиеДанные.РеквизитыОбъекта.ПолучитьЭлементы();
						
						// Обходим подчиненное дерево и проставляем галочки так как они установлены в конфигураторе 
						Для Каждого ВерхнийУровеньПодчиненногоДерева Из ПодчиненноеДеревоРеквизитов Цикл 
							
							ВерхнийУровеньПодчиненногоДерева.Пометка = 1;	
							
							НижнийУровеньПодчиненногоДерева	= ВерхнийУровеньПодчиненногоДерева.ПолучитьЭлементы();
							
							
							ВсегоПодчиненные = НижнийУровеньПодчиненногоДерева.Количество();
							ВсегоПомеченныеПодчиненных = 0;
							Для Каждого ТекущаяСтрокаПодчиненногоДерева Из НижнийУровеньПодчиненногоДерева Цикл 
								
								перПометка = ТекущаяСтрокаПодчиненногоДерева.ВключеноВКонфигураторе;
								ТекущаяСтрокаПодчиненногоДерева.Пометка 			= перПометка;
								
								ТекущаяСтрокаПодчиненногоДерева.ИспользованиеПолей 	= 0;
								
								Если перПометка = 1 Тогда 
									ВсегоПомеченныеПодчиненных = ВсегоПомеченныеПодчиненных + 1;
								КонецЕсли;
								
							КонецЦикла;	
							
							Если ВсегоПодчиненные = 0
								ИЛИ ВсегоПомеченныеПодчиненных = 0 Тогда 
								НижнийУровеньПодчиненногоДерева.Пометка	= 0;		
							КонецЕсли;	
							
							Если ВсегоПодчиненные > 0
								И ВсегоПомеченныеПодчиненных > 0
								И ВсегоПодчиненные <> ВсегоПомеченныеПодчиненных Тогда 
								НижнийУровеньПодчиненногоДерева.Пометка	= 2;		
							КонецЕсли;
		
						КонецЦикла;	
		
					КонецЕсли;	
					
					// Меняем галочки в основном дереве
					ИндексСтрокиДереваМетаданных = Элементы.ДеревоМетаданных.ТекущаяСтрока;
					ИзменениеПометки(ИндексСтрокиДереваМетаданных);		
							
				КонецЕсли;	
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗаписатьИзменения(Команда)

	ТекущиеДанные = Элементы.ДеревоМетаданных.ТекущиеДанные; 
	
	Если ТекущиеДанные <> Неопределено Тогда  
		
		ВерхнийУровеньДерева = ТекущиеДанные.ПолучитьРодителя();
		
		ДеревоЗаписатьИзмененияПоСтроке(ВерхнийУровеньДерева, ТекущиеДанные);
		
    КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИсториюДанныхТекущегоОбъекта(Команда)
	
	ТекущиеДанные = Элементы.ДеревоМетаданных.ТекущиеДанные; 
	
	Если ТекущиеДанные <> Неопределено Тогда  
		
		ВерхнийУровеньДерева = ТекущиеДанные.ПолучитьРодителя();
		
		Если ВерхнийУровеньДерева <> Неопределено Тогда  
		
			ПараметрыЗапуска = Новый Структура("ПолнаяЧистка", Ложь);
			ПараметрыЗапуска.Вставить("ТипДанных", ВерхнийУровеньДерева.Имя);
			ПараметрыЗапуска.Вставить("ИмяОбъекта", ТекущиеДанные.Имя);
			
			ОповещениеПослеВыбораДаты = Новый ОписаниеОповещения("ПослеВыбораДаты", ЭтотОбъект, ПараметрыЗапуска);
			
			ИмяФормыВыбораДаты = ПолучитьИмяФормы("ВыборПроизвольнойДаты");
			Если ИмяФормыВыбораДаты = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			
			ПараметрыФормы = Новый Структура("ТекущееСостояние", "Внимание! Будет очищена вся история по выбранному объекту до указанной даты!");
			ОткрытьФорму(ИмяФормыВыбораДаты, ПараметрыФормы,,,,, ОповещениеПослеВыбораДаты, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
			
		КонецЕсли;	
			
	КонецЕсли; 
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоМетаданныхРеквизитыОбъекта

&НаКлиенте
Процедура ДеревоМетаданныхРеквизитыОбъектаПометкаПриИзменении(Элемент)
			
	ИндексДеревоМетаданных	= Элементы.ДеревоМетаданных.ТекущаяСтрока;
	ИндексРеквизитыОбъекта  = Элементы.ДеревоМетаданныхРеквизитыОбъекта.ТекущаяСтрока;
	
	ИзменениеПометкиРеквизитыОбъекта(ИндексДеревоМетаданных, ИндексРеквизитыОбъекта);	
			
КонецПроцедуры 


#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ЭтотОбъект(ТекущийОбъект = Неопределено)
	
	Если ТекущийОбъект = Неопределено Тогда
		Возврат РеквизитФормыВЗначение("Объект");
	КонецЕсли; 
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	Возврат Неопределено;                
	
КонецФункции

&НаСервере
Процедура ИзменениеПометки(Строка) 
	
	ЭлементДанных = ДеревоМетаданных.НайтиПоИдентификатору(Строка);
	ЭтотОбъект().ИзменениеПометки(ЭлементДанных);
	
КонецПроцедуры 

&НаСервере
Процедура ИзменениеПометкиРеквизитыОбъекта(СтрокаДеревоМетаданных, СтрокаРеквизитыОбъекта) 
	
	ЭлементДанных = ДеревоМетаданных.НайтиПоИдентификатору(СтрокаДеревоМетаданных);   
	Если ЭлементДанных <> Неопределено Тогда 	
		ЭлементДанныхРеквизитыОбъекта = ЭлементДанных.РеквизитыОбъекта.НайтиПоИдентификатору(СтрокаРеквизитыОбъекта);
		ЭтотОбъект().ИзменениеПометки(ЭлементДанныхРеквизитыОбъекта);
	КонецЕсли;
	
КонецПроцедуры 
	
&НаСервере
Процедура НастройкиПоУмолчаниюНаСервере()

    // Используется история изменений 
	ИспользованиеИсторииДанныхВключено = Метаданные.СвойстваОбъектов.ИспользованиеИсторииДанных.Использовать;
	
	перСписокМетаданных = РеквизитФормыВЗначение("ДеревоМетаданных"); 
	Для Каждого ВерхнийУровеньДерева Из перСписокМетаданных.Строки Цикл	
		
		ВерхнийУровеньДерева.Пометка = 1;	
		ВсегоПодчиненные = Метаданные[ВерхнийУровеньДерева.Имя].Количество();
				
		Если ВсегоПодчиненные = 0 Тогда 
			МассивДанныеПоиска = Новый Массив;
		Иначе 
			МассивДанныеПоиска = СтрРазделить(ВерхнийУровеньДерева.ДанныеПоиска, ",", Ложь);
		КонецЕсли;	
		
		ВсегоПомеченныеПодчиненных = 0; 
		Для Каждого ПодчиненныйУровеньДерева Из ВерхнийУровеньДерева.Строки Цикл 
			
			ОбъектМетаданных = Метаданные[ВерхнийУровеньДерева.Имя][ПодчиненныйУровеньДерева.Имя];
			
			// Получаем программные настройки 
			Если ВерхнийУровеньДерева.Имя = "ОбщиеРеквизиты" Тогда
				НастройкиИД = Неопределено;	
			Иначе	
				НастройкиИД = ИсторияДанных.ПолучитьНастройки(ОбъектМетаданных);
			КонецЕсли;
			
			Если НастройкиИД <> Неопределено Тогда  
				
				// Удаление ранее сделанных настроек, 
				// будут использоваться настройки, сделанные в конфигураторе 		
				ИмяОбъектаРазделенное = Новый Массив;
				ИмяОбъектаРазделенное.Добавить(ВерхнийУровеньДерева.Имя);
				ИмяОбъектаРазделенное.Добавить(ПодчиненныйУровеньДерева.Имя);
				СброситьНастройкиУОбъекта(ИмяОбъектаРазделенное, ВПривилегированномРежиме);
				
			КонецЕсли;
			
			СоответствиеРеквизитов = Новый Соответствие;
					
			перПометка = ?(ОбъектМетаданных.ИсторияДанных = ИспользованиеИсторииДанныхВключено, 1, 0);
			
			ПодчиненныйУровеньДерева.Пометка = перПометка;			
			ПодчиненныйУровеньДерева.ИспользованиеПолей = 0; // убираем картинку ИД
			
			Если перПометка = 1 Тогда 
				ВсегоПомеченныеПодчиненных = ВсегоПомеченныеПодчиненных + 1;
			КонецЕсли;
			
			ПодчиненныйУровеньДерева.ИндексКартинки = ВерхнийУровеньДерева.ИндексКартинки;	
				
			ЗаполнитьРеквизитыДереваМетаданных(ПодчиненныйУровеньДерева, ОбъектМетаданных, МассивДанныеПоиска, СоответствиеРеквизитов);
						
		КонецЦикла;  
		
		Если ВсегоПодчиненные = 0
			ИЛИ ВсегоПомеченныеПодчиненных = 0 Тогда 
			ВерхнийУровеньДерева.Пометка = 0;		
		КонецЕсли;	
		
		Если ВсегоПодчиненные > 0
			И ВсегоПомеченныеПодчиненных > 0
			И ВсегоПодчиненные <> ВсегоПомеченныеПодчиненных Тогда 
			ВерхнийУровеньДерева.Пометка = 2;		
		КонецЕсли;
	
	КонецЦикла;	
	ЗначениеВРеквизитФормы(перСписокМетаданных, "ДеревоМетаданных");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СброситьНастройкиУОбъекта(ИмяОбъектаРазделенное, ВПривилегированномРежиме = Ложь)
	
	ВключенПривилегированныйРежим = Ложь;
	Если ВПривилегированномРежиме Тогда 
		Если Не ПривилегированныйРежим() Тогда  
			ВключенПривилегированныйРежим = Истина;
			УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
		КонецЕсли;	
	КонецЕсли;
	
	ОбъектМетаданных = Метаданные[ИмяОбъектаРазделенное[0]][ИмяОбъектаРазделенное[1]];
	
	// Удаление ранее сделанных настроек
	ИсторияДанных.УстановитьНастройки(ОбъектМетаданных, Неопределено); 
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;
	
КонецПроцедуры	

// TODO: Переделать
&НаКлиенте
Процедура ДеревоЗаписатьИзмененияПоСтроке(ВерхнийУровеньДерева, ТекущиеДанные)
	
	Если ВерхнийУровеньДерева <> Неопределено Тогда
		Если Не ПустаяСтрока(ТекущиеДанные.ПолноеИмя) Тогда 
			
			ИмяОбъектаРазделенное = СтрРазделить(ТекущиеДанные.ПолноеИмя, ".", Ложь);
			
			Если ИмяОбъектаРазделенное.Количество() = 2 Тогда
								
				ЕстьПрограммныеНастройкиВерх = ТекущиеДанные.ИспользованиеПолей <> 0;
				Если ЕстьПрограммныеНастройкиВерх Тогда 
					ЗначениеДоИзмененияВерх	= ?(ТекущиеДанные.ИспользованиеПолей = 2, 1, 0);
				Иначе	
					ЗначениеДоИзмененияВерх	= ТекущиеДанные.ВключеноВКонфигураторе;
				КонецЕсли;
				
				СтруктураНастройкиИсторииДанных = Новый Структура("ТипМетаданных, ИмяМетаданных", ИмяОбъектаРазделенное[0], ИмяОбъектаРазделенное[1]);
				СтруктураНастройкиИсторииДанных.Вставить("Использование", ?(ТекущиеДанные.Пометка = 1, Истина, Ложь));
								
				ИспользованиеПолей  = Новый Соответствие;
				СтруктураНастройкиИсторииДанных.Вставить("ИспользованиеПолей", ИспользованиеПолей);
				
				КоличествоИзменений = 0;
				Если Не ПустаяСтрока(ВерхнийУровеньДерева.ДанныеПоиска) Тогда
						
					ПодчиненноеДеревоРеквизитов = ТекущиеДанные.РеквизитыОбъекта.ПолучитьЭлементы();
                    
					Для Каждого ВерхнийУровеньПодчиненногоДерева Из ПодчиненноеДеревоРеквизитов Цикл
						
						НижнийУровеньПодчиненногоДерева	= ВерхнийУровеньПодчиненногоДерева.ПолучитьЭлементы();
											
                        
						Для Каждого ТекущаяСтрокаПодчиненногоДерева Из НижнийУровеньПодчиненногоДерева Цикл 
							
							ЕстьПрограммныеНастройки = ТекущаяСтрокаПодчиненногоДерева.ИспользованиеПолей <> 0;
							Если ЕстьПрограммныеНастройки Тогда 
								ЗначениеДоИзменения	= ?(ТекущаяСтрокаПодчиненногоДерева.ИспользованиеПолей = 2, 1, 0);
							Иначе	
								ЗначениеДоИзменения	= ТекущаяСтрокаПодчиненногоДерева.ВключеноВКонфигураторе;
							КонецЕсли;
							
							Если ТекущаяСтрокаПодчиненногоДерева.Пометка <> ЗначениеДоИзменения Тогда 
								КоличествоИзменений = КоличествоИзменений + 1;	
							КонецЕсли;	
								
							Если ТекущаяСтрокаПодчиненногоДерева.Пометка = ТекущаяСтрокаПодчиненногоДерева.ВключеноВКонфигураторе Тогда 
									
								// Меняем картинку 
								Если ТекущаяСтрокаПодчиненногоДерева.ИспользованиеПолей <> 0 Тогда 
									ТекущаяСтрокаПодчиненногоДерева.ИспользованиеПолей = 0;
								КонецЕсли;
								
							Иначе 
																
								// Меняем картинку 
								НовоеЗначениеИспользованиеПолей = ?(ТекущаяСтрокаПодчиненногоДерева.Пометка, 2, 1);
								Если ТекущаяСтрокаПодчиненногоДерева.ИспользованиеПолей <> НовоеЗначениеИспользованиеПолей Тогда  
									ТекущаяСтрокаПодчиненногоДерева.ИспользованиеПолей = НовоеЗначениеИспользованиеПолей;
								КонецЕсли;
								
								ИспользованиеПолей.Вставить(ТекущаяСтрокаПодчиненногоДерева.ПолноеИмя, ?(ТекущаяСтрокаПодчиненногоДерева.Пометка = 1, Истина, Ложь)); 
									
							КонецЕсли;	
																
						КонецЦикла;							
					КонецЦикла;  
						
			    КонецЕсли;
				
				ВерхняяПометкаМенялась = Ложь;
				Если ТекущиеДанные.Пометка <> ЗначениеДоИзмененияВерх Тогда 
					
					ВерхняяПометкаМенялась = Истина;
					
				КонецЕсли;	
				
				// Меняем отображение в деревьях и настройки
				Если Не ВерхняяПометкаМенялась И КоличествоИзменений = 0 Тогда // +
					
				ИначеЕсли Не ВерхняяПометкаМенялась И КоличествоИзменений > 0 Тогда // +	
					// Изменились реквизиты
					СтруктураНастройкиИсторииДанных.ИспользованиеПолей = ИспользованиеПолей;
					
					Если ИспользованиеПолей.Количество() = 0 
						И ТекущиеДанные.ВключеноВКонфигураторе = ТекущиеДанные.Пометка Тогда 
						
						// Меняем картинку 
						Если ТекущиеДанные.ИспользованиеПолей <> 0 Тогда 
							ТекущиеДанные.ИспользованиеПолей = 0;
						КонецЕсли;
				
						// Чистим программные настройки
						СброситьНастройкиУОбъекта(ИмяОбъектаРазделенное, ВПривилегированномРежиме);
						
					Иначе
						// Меняем картинку 
						НовоеЗначениеИспользованиеПолей = ?(ТекущиеДанные.Пометка, 2, 1);
						Если ТекущиеДанные.ИспользованиеПолей <> НовоеЗначениеИспользованиеПолей Тогда  
							ТекущиеДанные.ИспользованиеПолей = НовоеЗначениеИспользованиеПолей;
						КонецЕсли;
						
						// Записываем настройки
						ЗаписатьНастройкиИсторииДанных(СтруктураНастройкиИсторииДанных, ВПривилегированномРежиме);
					КонецЕсли;	
					
					
				ИначеЕсли ВерхняяПометкаМенялась И КоличествоИзменений = 0 Тогда // +	
					
					// Изменилась главная настройка 
					Если ТекущиеДанные.ВключеноВКонфигураторе = ТекущиеДанные.Пометка Тогда 
							
						Если ИспользованиеПолей.Количество() = 0 Тогда 
							
							// Меняем картинку 
							Если ТекущиеДанные.ИспользованиеПолей <> 0 Тогда 
								ТекущиеДанные.ИспользованиеПолей = 0;
							КонецЕсли;
				
							// Чистим программные настройки
							СброситьНастройкиУОбъекта(ИмяОбъектаРазделенное, ВПривилегированномРежиме);	
							
						Иначе
							
							СтруктураНастройкиИсторииДанных.Использование = ?(ТекущиеДанные.Пометка = 1, Истина, Ложь); 	
							
							// Меняем картинку 
							НовоеЗначениеИспользованиеПолей = ?(ТекущиеДанные.Пометка, 2, 1);
							Если ТекущиеДанные.ИспользованиеПолей <> НовоеЗначениеИспользованиеПолей Тогда  
								ТекущиеДанные.ИспользованиеПолей = НовоеЗначениеИспользованиеПолей;
							КонецЕсли;
							
							// Записываем настройки
                            ЗаписатьНастройкиИсторииДанных(СтруктураНастройкиИсторииДанных, ВПривилегированномРежиме);
	
						КонецЕсли;
						                  						
					Иначе
						
						// Меняем картинку 
						НовоеЗначениеИспользованиеПолей = ?(ТекущиеДанные.Пометка, 2, 1);
						Если ТекущиеДанные.ИспользованиеПолей <> НовоеЗначениеИспользованиеПолей Тогда  
							ТекущиеДанные.ИспользованиеПолей = НовоеЗначениеИспользованиеПолей;
						КонецЕсли;
						
                        СтруктураНастройкиИсторииДанных.Использование = ?(ТекущиеДанные.Пометка = 1, Истина, Ложь);
						
						// Записываем настройки
						ЗаписатьНастройкиИсторииДанных(СтруктураНастройкиИсторииДанных, ВПривилегированномРежиме);		
						
					КонецЕсли;						
				Иначе
					// ВерхняяПометкаМенялась И КоличествоИзменений > 0
					
					// Изменились реквизиты
					СтруктураНастройкиИсторииДанных.ИспользованиеПолей = ИспользованиеПолей;
					
					// Изменилась главная настройка 
					Если ТекущиеДанные.ВключеноВКонфигураторе = ТекущиеДанные.Пометка Тогда 
							
						Если ИспользованиеПолей.Количество() = 0 Тогда 
							
							// Меняем картинку 
							Если ТекущиеДанные.ИспользованиеПолей <> 0 Тогда 
								ТекущиеДанные.ИспользованиеПолей = 0;
							КонецЕсли;
				
							// Чистим программные настройки
							СброситьНастройкиУОбъекта(ИмяОбъектаРазделенное, ВПривилегированномРежиме);	
							
						Иначе
							
							СтруктураНастройкиИсторииДанных.Использование = ?(ТекущиеДанные.Пометка = 1, Истина, Ложь); 	
							
							// Меняем картинку 
							НовоеЗначениеИспользованиеПолей = ?(ТекущиеДанные.Пометка, 2, 1);
							Если ТекущиеДанные.ИспользованиеПолей <> НовоеЗначениеИспользованиеПолей Тогда  
								ТекущиеДанные.ИспользованиеПолей = НовоеЗначениеИспользованиеПолей;
							КонецЕсли;

							
							// Записываем настройки
                            ЗаписатьНастройкиИсторииДанных(СтруктураНастройкиИсторииДанных, ВПривилегированномРежиме);
	
						КонецЕсли;
						                  						
					Иначе
						
						// Меняем картинку 
						НовоеЗначениеИспользованиеПолей = ?(ТекущиеДанные.Пометка, 2, 1);
						Если ТекущиеДанные.ИспользованиеПолей <> НовоеЗначениеИспользованиеПолей Тогда  
							ТекущиеДанные.ИспользованиеПолей = НовоеЗначениеИспользованиеПолей;
						КонецЕсли;
						
                        СтруктураНастройкиИсторииДанных.Использование = ?(ТекущиеДанные.Пометка = 1, Истина, Ложь);
						
						// Записываем настройки
						ЗаписатьНастройкиИсторииДанных(СтруктураНастройкиИсторииДанных, ВПривилегированномРежиме);
						
						
					КонецЕсли;	
									
				КонецЕсли;				
			КонецЕсли;	
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьРеквизитыДереваМетаданных(ПодчиненныйУровеньДерева, ОбъектМетаданных, МассивДанныеПоиска, СоответствиеРеквизитов)  
	
	// Используется история изменений 
	ИспользованиеИсторииДанныхВключено = Метаданные.СвойстваОбъектов.ИспользованиеИсторииДанных.Использовать; 
	
	СоответствиеРеквизитовКартинок = СоответствиеРеквизитовИНомерКартинки();
	
	// "Поля и табличные части"	 
	СоответствиеВерхнегоУровня = Новый Соответствие; 
		
	// Собираем таблицу для более тонкой настройки истории данных 
	РеквизитыОбъекта =  РеквизитыДереваМетаданных();
	
	Для Каждого элМассива Из МассивДанныеПоиска Цикл 
		
		Если элМассива = "Реквизиты"
			Или элМассива = "СтандартныеРеквизиты" 
			Или элМассива = "РеквизитыАдресации" 
			Или элМассива = "ПризнакиУчета"
			Или элМассива = "ПризнакиУчетаСубконто"
			Или элМассива = "Измерения" // 20230619
			
		Тогда
		
			перКоличествоЭлементов = ОбъектМетаданных[элМассива].Количество()-1;
			Если перКоличествоЭлементов > -1 Тогда
				
				Если СоответствиеВерхнегоУровня[элМассива] = Неопределено Тогда 
					
					ВерхнийУровеньРеквизитыОбъекта 	= РеквизитыОбъекта.Строки.Добавить();
					
					ВерхнийУровеньРеквизитыОбъекта.Пометка			= 1;	
					ВерхнийУровеньРеквизитыОбъекта.Имя				= элМассива;
					ВерхнийУровеньРеквизитыОбъекта.Синоним 			= ?(элМассива = "СтандартныеРеквизиты", "Стандартные реквизиты",
																		?(элМассива = "РеквизитыАдресации", "Реквизиты адресации", элМассива));
					ВерхнийУровеньРеквизитыОбъекта.ИндексКартинки 	= СоответствиеРеквизитовКартинок[элМассива];
					
					ВерхнийУровеньРеквизитыОбъекта.ВключеноВКонфигураторе = 3; // пустая иконка
					
					СоответствиеВерхнегоУровня.Вставить(элМассива, ВерхнийУровеньРеквизитыОбъекта);  
					
				Иначе
					ВерхнийУровеньРеквизитыОбъекта = СоответствиеВерхнегоУровня[элМассива];
				КонецЕсли;	
				
				ВсегоПодчиненные = перКоличествоЭлементов + 1;	
				ВсегоПомеченныеПодчиненных = 0;										
				Для перСчетчикЭлементов = 0 По перКоличествоЭлементов Цикл 
						
					перТекущийРеквизитОбъекта = ОбъектМетаданных[элМассива][перСчетчикЭлементов];

					НоваяСтрокаРеквизитыОбъекта 						= ВерхнийУровеньРеквизитыОбъекта.Строки.Добавить(); 
					НоваяСтрокаРеквизитыОбъекта.ИндексКартинки 			= СоответствиеРеквизитовКартинок[элМассива];
					НоваяСтрокаРеквизитыОбъекта.Имя 					= перТекущийРеквизитОбъекта.Имя;
					НоваяСтрокаРеквизитыОбъекта.Синоним					=  ?(НЕ ПустаяСтрока(перТекущийРеквизитОбъекта.Синоним), 
																			перТекущийРеквизитОбъекта.Синоним, 
																			перТекущийРеквизитОбъекта.Имя);
																		
			        НоваяСтрокаРеквизитыОбъекта.ПолноеИмя 				= перТекущийРеквизитОбъекта.Имя; 
					
					НоваяСтрокаРеквизитыОбъекта.ВключеноВКонфигураторе 	= перТекущийРеквизитОбъекта.ИсторияДанных = ИспользованиеИсторииДанныхВключено;
					
					перПодчиненныйРеквизитВключен = СоответствиеРеквизитов[НоваяСтрокаРеквизитыОбъекта.Имя];
					
					Если перПодчиненныйРеквизитВключен = Неопределено Тогда 
						НоваяСтрокаРеквизитыОбъекта.Пометка = ?(перТекущийРеквизитОбъекта.ИсторияДанных = ИспользованиеИсторииДанныхВключено, 1, 0); 		
					Иначе
						НоваяСтрокаРеквизитыОбъекта.Пометка 			= перПодчиненныйРеквизитВключен;
						НоваяСтрокаРеквизитыОбъекта.ИспользованиеПолей 	= ?(перПодчиненныйРеквизитВключен, 2, 1);			
					КонецЕсли;
					
					Если НоваяСтрокаРеквизитыОбъекта.Пометка = 1 Тогда 
						ВсегоПомеченныеПодчиненных = ВсегоПомеченныеПодчиненных + 1;
					КонецЕсли;	

					
				КонецЦикла;  
				
				Если ВсегоПодчиненные = 0
					ИЛИ ВсегоПомеченныеПодчиненных = 0 Тогда 
					ВерхнийУровеньРеквизитыОбъекта.Пометка = 0;		
				КонецЕсли;	
					
				Если ВсегоПодчиненные > 0
					И ВсегоПомеченныеПодчиненных > 0
					И ВсегоПодчиненные <> ВсегоПомеченныеПодчиненных Тогда 
					ВерхнийУровеньРеквизитыОбъекта.Пометка = 2;		
				КонецЕсли;
					
			КонецЕсли;
			
		ИначеЕсли элМассива = "ТабличныеЧасти" Тогда 	
			перКоличествоЭлементов = ОбъектМетаданных[элМассива].Количество()-1;
			
			Для перСчетчикЭлементов = 0 По перКоличествоЭлементов Цикл
				перТекущаяТаблицаОбъекта = ОбъектМетаданных[элМассива][перСчетчикЭлементов];
				
				перКоличествоРеквизитовТЗ = перТекущаяТаблицаОбъекта.Реквизиты.Количество()-1;
				Если перКоличествоРеквизитовТЗ > -1 Тогда 
					
					имяВерхнегоЭлемента = перТекущаяТаблицаОбъекта.Имя;
					Если СоответствиеВерхнегоУровня[имяВерхнегоЭлемента] = Неопределено Тогда
						
						ВерхнийУровеньРеквизитыТЗОбъекта 	= РеквизитыОбъекта.Строки.Добавить();
						
						ВерхнийУровеньРеквизитыТЗОбъекта.Пометка				= 1;	
						ВерхнийУровеньРеквизитыТЗОбъекта.Имя					= имяВерхнегоЭлемента;
						ВерхнийУровеньРеквизитыТЗОбъекта.Синоним 				= имяВерхнегоЭлемента;
						ВерхнийУровеньРеквизитыТЗОбъекта.ИндексКартинки 		= СоответствиеРеквизитовКартинок[элМассива];
						
						ВерхнийУровеньРеквизитыТЗОбъекта.ВключеноВКонфигураторе = 3; // пустая иконка
						
						СоответствиеВерхнегоУровня.Вставить(имяВерхнегоЭлемента, ВерхнийУровеньРеквизитыТЗОбъекта); 
						
					Иначе
						ВерхнийУровеньРеквизитыТЗОбъекта = СоответствиеВерхнегоУровня[имяВерхнегоЭлемента];
					КонецЕсли;	
					
					ВсегоПодчиненные = перКоличествоРеквизитовТЗ + 1;	
					ВсегоПомеченныеПодчиненных = 0;					
					Для перСчетчикРеквизитовТЗ = 0 По перКоличествоРеквизитовТЗ Цикл 
					
						перТекущийРеквизитТЗОбъекта = перТекущаяТаблицаОбъекта.Реквизиты[перСчетчикРеквизитовТЗ];

						НоваяСтрокаРеквизитыТЗОбъекта 				= ВерхнийУровеньРеквизитыТЗОбъекта.Строки.Добавить(); 
						НоваяСтрокаРеквизитыТЗОбъекта.ИндексКартинки= 0;
						НоваяСтрокаРеквизитыТЗОбъекта.Имя 			= перТекущийРеквизитТЗОбъекта.Имя;
						НоваяСтрокаРеквизитыТЗОбъекта.Синоним		=  ?(НЕ ПустаяСтрока(перТекущийРеквизитТЗОбъекта.Синоним), 
																			перТекущийРеквизитТЗОбъекта.Синоним, 
																			перТекущийРеквизитТЗОбъекта.Имя);
																			
			            НоваяСтрокаРеквизитыТЗОбъекта.ПолноеИмя 	= имяВерхнегоЭлемента+"."+перТекущийРеквизитТЗОбъекта.Имя; 
						
						НоваяСтрокаРеквизитыТЗОбъекта.ВключеноВКонфигураторе = перТекущийРеквизитТЗОбъекта.ИсторияДанных = ИспользованиеИсторииДанныхВключено;
						
						перПодчиненныйРеквизитВключен = СоответствиеРеквизитов[НоваяСтрокаРеквизитыТЗОбъекта.ПолноеИмя];
						
						Если перПодчиненныйРеквизитВключен = Неопределено Тогда 
							НоваяСтрокаРеквизитыТЗОбъекта.Пометка = ?(перТекущийРеквизитТЗОбъекта.ИсторияДанных = ИспользованиеИсторииДанныхВключено, 1, 0); 
						Иначе
							НоваяСтрокаРеквизитыТЗОбъекта.Пометка 			= перПодчиненныйРеквизитВключен;
							НоваяСтрокаРеквизитыТЗОбъекта.ИспользованиеПолей= ?(перПодчиненныйРеквизитВключен, 2, 1);
						КонецЕсли;

						Если НоваяСтрокаРеквизитыТЗОбъекта.Пометка = 1 Тогда 
							ВсегоПомеченныеПодчиненных = ВсегоПомеченныеПодчиненных + 1;
						КонецЕсли;	
						
					КонецЦикла;							
					
					Если ВсегоПодчиненные = 0
						ИЛИ ВсегоПомеченныеПодчиненных = 0 Тогда 
						ВерхнийУровеньРеквизитыТЗОбъекта.Пометка = 0;		
					КонецЕсли;	
					
					Если ВсегоПодчиненные > 0
						И ВсегоПомеченныеПодчиненных > 0
						И ВсегоПодчиненные <> ВсегоПомеченныеПодчиненных Тогда 
						ВерхнийУровеньРеквизитыТЗОбъекта.Пометка = 2;		
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла; 
			
		ИначеЕсли элМассива = "СтандартныеТабличныеЧасти" Тогда 
			
			перКоличествоЭлементов = -1;
			Для Каждого элементПеребор Из ОбъектМетаданных[элМассива] Цикл 
				перКоличествоЭлементов = перКоличествоЭлементов + 1;
			КонецЦикла;	
				
								
			Для перСчетчикЭлементов = 0 По перКоличествоЭлементов Цикл
				перТекущаяТаблицаОбъекта = ОбъектМетаданных[элМассива][перСчетчикЭлементов];
				
				перКоличествоРеквизитовТЗ = перТекущаяТаблицаОбъекта.СтандартныеРеквизиты.Количество()-1;
				Если перКоличествоРеквизитовТЗ > -1 Тогда 
					
					имяВерхнегоЭлемента = перТекущаяТаблицаОбъекта.Имя;
					Если СоответствиеВерхнегоУровня[имяВерхнегоЭлемента] = Неопределено Тогда 
						
						ВерхнийУровеньРеквизитыТЗОбъекта 	= РеквизитыОбъекта.Строки.Добавить();
						
						ВерхнийУровеньРеквизитыТЗОбъекта.Пометка			= 1;	
						ВерхнийУровеньРеквизитыТЗОбъекта.Имя				= имяВерхнегоЭлемента;
						ВерхнийУровеньРеквизитыТЗОбъекта.Синоним 			= имяВерхнегоЭлемента;
						ВерхнийУровеньРеквизитыТЗОбъекта.ИндексКартинки 	= СоответствиеРеквизитовКартинок[элМассива];
						
						ВерхнийУровеньРеквизитыТЗОбъекта.ВключеноВКонфигураторе = 3; // пустая иконка
						
						СоответствиеВерхнегоУровня.Вставить(имяВерхнегоЭлемента, ВерхнийУровеньРеквизитыТЗОбъекта);  
						
					Иначе
						ВерхнийУровеньРеквизитыТЗОбъекта = СоответствиеВерхнегоУровня[имяВерхнегоЭлемента];
					КонецЕсли;	
					
					ВсегоПодчиненные = перКоличествоРеквизитовТЗ + 1;	
					ВсегоПомеченныеПодчиненных = 0;
					Для перСчетчикРеквизитовТЗ = 0 По перКоличествоРеквизитовТЗ Цикл 
					
						перТекущийРеквизитТЗОбъекта = перТекущаяТаблицаОбъекта.СтандартныеРеквизиты[перСчетчикРеквизитовТЗ];

						НоваяСтрокаРеквизитыТЗОбъекта 				= ВерхнийУровеньРеквизитыТЗОбъекта.Строки.Добавить(); 
						НоваяСтрокаРеквизитыТЗОбъекта.ИндексКартинки= 1;
						НоваяСтрокаРеквизитыТЗОбъекта.Имя 			= перТекущийРеквизитТЗОбъекта.Имя;
						НоваяСтрокаРеквизитыТЗОбъекта.Синоним		=  ?(НЕ ПустаяСтрока(перТекущийРеквизитТЗОбъекта.Синоним), 
																			перТекущийРеквизитТЗОбъекта.Синоним, 
																			перТекущийРеквизитТЗОбъекта.Имя);
																			
			            НоваяСтрокаРеквизитыТЗОбъекта.ПолноеИмя 	= имяВерхнегоЭлемента+"."+перТекущийРеквизитТЗОбъекта.Имя; 
						
						НоваяСтрокаРеквизитыТЗОбъекта.ВключеноВКонфигураторе = перТекущийРеквизитТЗОбъекта.ИсторияДанных = ИспользованиеИсторииДанныхВключено;
						
						перПодчиненныйРеквизитВключен = СоответствиеРеквизитов[НоваяСтрокаРеквизитыТЗОбъекта.ПолноеИмя];
						
						Если перПодчиненныйРеквизитВключен = Неопределено Тогда 
							НоваяСтрокаРеквизитыТЗОбъекта.Пометка = ?(перТекущийРеквизитТЗОбъекта.ИсторияДанных = ИспользованиеИсторииДанныхВключено, 1, 0); 
						Иначе
							НоваяСтрокаРеквизитыТЗОбъекта.Пометка 			= перПодчиненныйРеквизитВключен;
							НоваяСтрокаРеквизитыТЗОбъекта.ИспользованиеПолей= ?(перПодчиненныйРеквизитВключен, 2, 1);
						КонецЕсли;
												
						Если НоваяСтрокаРеквизитыТЗОбъекта.Пометка = 1 Тогда 
							ВсегоПомеченныеПодчиненных = ВсегоПомеченныеПодчиненных + 1;
						КонецЕсли;	
						
					КонецЦикла;
					
					Если ВсегоПодчиненные = 0
						ИЛИ ВсегоПомеченныеПодчиненных = 0 Тогда 
						ВерхнийУровеньРеквизитыТЗОбъекта.Пометка = 0;		
					КонецЕсли;	
					
					Если ВсегоПодчиненные > 0
						И ВсегоПомеченныеПодчиненных > 0
						И ВсегоПодчиненные <> ВсегоПомеченныеПодчиненных Тогда 
						ВерхнийУровеньРеквизитыТЗОбъекта.Пометка = 2;		
					КонецЕсли;
					
					
				КонецЕсли;
			КонецЦикла; 
			
		ИначеЕсли элМассива = "Ресурсы" Тогда						
			
			перКоличествоЭлементов = ОбъектМетаданных[элМассива].Количество()-1;
			Если перКоличествоЭлементов > -1 Тогда
					
				Если СоответствиеВерхнегоУровня[элМассива] = Неопределено Тогда 
					
					ВерхнийУровеньРеквизитыОбъекта 	= РеквизитыОбъекта.Строки.Добавить();
					
					ВерхнийУровеньРеквизитыОбъекта.Пометка			= 1;	
					ВерхнийУровеньРеквизитыОбъекта.Имя				= элМассива;
					ВерхнийУровеньРеквизитыОбъекта.Синоним 			= элМассива;
					ВерхнийУровеньРеквизитыОбъекта.ИндексКартинки 	= СоответствиеРеквизитовКартинок[элМассива];
					
					ВерхнийУровеньРеквизитыОбъекта.ВключеноВКонфигураторе = 3; // пустая иконка
					
					СоответствиеВерхнегоУровня.Вставить(элМассива, ВерхнийУровеньРеквизитыОбъекта);
										
				Иначе
					ВерхнийУровеньРеквизитыОбъекта = СоответствиеВерхнегоУровня[элМассива];
				КонецЕсли;	
				
				
				ВсегоПодчиненные = перКоличествоЭлементов + 1;	
				ВсегоПомеченныеПодчиненных = 0;
				Для перСчетчикЭлементов = 0 По перКоличествоЭлементов Цикл 
						
					перТекущийРеквизитОбъекта = ОбъектМетаданных[элМассива][перСчетчикЭлементов];

					НоваяСтрокаРеквизитыОбъекта 				= ВерхнийУровеньРеквизитыОбъекта.Строки.Добавить(); 
					НоваяСтрокаРеквизитыОбъекта.ИндексКартинки 	= СоответствиеРеквизитовКартинок[элМассива];
					НоваяСтрокаРеквизитыОбъекта.Имя 			= перТекущийРеквизитОбъекта.Имя;
					НоваяСтрокаРеквизитыОбъекта.Синоним			=  ?(НЕ ПустаяСтрока(перТекущийРеквизитОбъекта.Синоним), 
																		перТекущийРеквизитОбъекта.Синоним, 
																		перТекущийРеквизитОбъекта.Имя);
																		
			        НоваяСтрокаРеквизитыОбъекта.ПолноеИмя 		= перТекущийРеквизитОбъекта.Имя; 
					
					НоваяСтрокаРеквизитыОбъекта.ВключеноВКонфигураторе = перТекущийРеквизитОбъекта.ИсторияДанных = ИспользованиеИсторииДанныхВключено;
					
					перПодчиненныйРеквизитВключен = СоответствиеРеквизитов[НоваяСтрокаРеквизитыОбъекта.Имя];
					
					Если перПодчиненныйРеквизитВключен = Неопределено Тогда 
						НоваяСтрокаРеквизитыОбъекта.Пометка = ?(перТекущийРеквизитОбъекта.ИсторияДанных = ИспользованиеИсторииДанныхВключено, 1, 0); 
					Иначе
						НоваяСтрокаРеквизитыОбъекта.Пометка = перПодчиненныйРеквизитВключен;
						НоваяСтрокаРеквизитыОбъекта.ИспользованиеПолей= ?(перПодчиненныйРеквизитВключен, 2, 1);
					КонецЕсли;
					
					Если НоваяСтрокаРеквизитыОбъекта.Пометка = 1 Тогда 
						ВсегоПомеченныеПодчиненных = ВсегоПомеченныеПодчиненных + 1;
					КонецЕсли;	
			
				КонецЦикла; 
				
				
				Если ВсегоПодчиненные = 0
					ИЛИ ВсегоПомеченныеПодчиненных = 0 Тогда 
					ВерхнийУровеньРеквизитыОбъекта.Пометка = 0;		
				КонецЕсли;	
				
				Если ВсегоПодчиненные > 0
					И ВсегоПомеченныеПодчиненных > 0
					И ВсегоПодчиненные <> ВсегоПомеченныеПодчиненных Тогда 
					ВерхнийУровеньРеквизитыОбъекта.Пометка = 2;		
				КонецЕсли;
			
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;	
	

	ПодчиненныйУровеньДерева.РеквизитыОбъекта = РеквизитыОбъекта;

КонецПроцедуры	

&НаСервереБезКонтекста
Функция СоответствиеРеквизитовИНомерКартинки()
	
	СоответствиеРеквизитовКартинок = Новый Соответствие;
	СоответствиеРеквизитовКартинок.Вставить("Реквизиты", 					0);
	СоответствиеРеквизитовКартинок.Вставить("СтандартныеРеквизиты", 		1);
	СоответствиеРеквизитовКартинок.Вставить("ТабличныеЧасти", 				2);
	СоответствиеРеквизитовКартинок.Вставить("СтандартныеТабличныеЧасти", 	3);
	СоответствиеРеквизитовКартинок.Вставить("РеквизитыАдресации", 			1);
	СоответствиеРеквизитовКартинок.Вставить("Ресурсы", 						4);
    СоответствиеРеквизитовКартинок.Вставить("Поля", 						5);
	
	СоответствиеРеквизитовКартинок.Вставить("Измерения", 					1);  // 20230619
	
	Возврат СоответствиеРеквизитовКартинок;
	
КонецФункции	

&НаСервереБезКонтекста
Функция НастройкиИсторииДанных(ТипМетаданных, ИмяМетаданных)
	
	Результат = Новый Структура("Использование, ИспользованиеПолей, ЕстьНастройка", Ложь, Новый Соответствие, Ложь);
	
	Настройки = ИсторияДанных.ПолучитьНастройки(Метаданные[ТипМетаданных][ИмяМетаданных]);	
	Если Настройки = Неопределено Тогда 
		Возврат Результат;
	Иначе
		Результат.Использование 		= Настройки.Использование;
		Результат.ИспользованиеПолей 	= Настройки.ИспользованиеПолей;
		Результат.ЕстьНастройка			= Истина;
		
		Возврат Результат;
	КонецЕсли;		
	
КонецФункции	

&НаСервереБезКонтекста
Процедура ЗаписатьНастройкиИсторииДанных(СтруктураНастройкиИсторииДанных, ВПривилегированномРежиме = Ложь)
	
	ВключенПривилегированныйРежим = Ложь;
	Если ВПривилегированномРежиме Тогда 
		Если Не ПривилегированныйРежим() Тогда  
			ВключенПривилегированныйРежим = Истина;
			УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
		КонецЕсли;	
	КонецЕсли;
		
	Настройки = Новый НастройкиИсторииДанных;
	Настройки.Использование = СтруктураНастройкиИсторииДанных.Использование; 
		
	Если СтруктураНастройкиИсторииДанных.ИспользованиеПолей.Количество() > 0 Тогда 
		Настройки.ИспользованиеПолей = СтруктураНастройкиИсторииДанных.ИспользованиеПолей;
	КонецЕсли;
		
	ИсторияДанных.УстановитьНастройки(Метаданные[СтруктураНастройкиИсторииДанных.ТипМетаданных][СтруктураНастройкиИсторииДанных.ИмяМетаданных], Настройки);
			
		
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;
	
КонецПроцедуры	


#Область ОчисткаИстории

&НаКлиенте
Процедура ПослеВыбораДаты(Результат, ПараметрыЗапуска = Неопределено) Экспорт

	Если Результат = Неопределено Или Не ЗначениеЗаполнено(Результат) Тогда 
		СообщениеОбОтсутствиеДаты = НСтр("ru='Не указана дата. Операция будет прервана'; SYS='SDCH.Main.MessageDateIsEmpty'", "ru");
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапуска)
		И ТипЗнч(ПараметрыЗапуска) = Тип("Структура") Тогда 
		
		ПараметрыЗапуска.Вставить("ВыбраннаяДата", Результат);
		
	Иначе	
	
		ПараметрыЗапуска = Новый Структура("ВыбраннаяДата", Результат);
		
	КонецЕсли;
			
	ОповещениеПослеВыводаДиолога = Новый ОписаниеОповещения("ПослеВыводаДиолога", ЭтотОбъект, ПараметрыЗапуска); 
	ТекстДиалога = СтрШаблон(НСтр("ru='Внимание! История данных будет очищена на дату ""%1"". Версии будут удалены без возможности восстановления'; SYS='SDCH.Main.WipeDataWarningMsg'", "ru"), 
		Результат);
		
	ПоказатьВопрос(ОповещениеПослеВыводаДиолога, ТекстДиалога,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да,
		НСтр("ru='Очистка версий истории данных'; SYS='SDCH.Main.WipeDataWarningTitle'", "ru"));	
	
КонецПроцедуры

// Процедура - После вывода диолога
//
// Параметры:
//  РезультатВопроса - КодВозвратаДиалога - Ответ на вопрос из процедуры ПослеВыбораДаты 
//  ПараметрыЗапуска - Структура - Содержит дату по которую очищаем данные 
//
&НаКлиенте
Процедура ПослеВыводаДиолога(РезультатВопроса, ПараметрыЗапуска = Неопределено) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		
		Если ПараметрыЗапуска.Свойство("ПолнаяЧистка") 
			И Не ПараметрыЗапуска.ПолнаяЧистка Тогда   
			
			ТипДанных = ""; 
			ИмяОбъекта = "";
			Если ПараметрыЗапуска.Свойство("ТипДанных")
				И ЗначениеЗаполнено(ПараметрыЗапуска.ТипДанных) Тогда 
				ТипДанных = ПараметрыЗапуска.ТипДанных;
			КонецЕсли;	
				
			Если ПараметрыЗапуска.Свойство("ИмяОбъекта")
				И ЗначениеЗаполнено(ПараметрыЗапуска.ИмяОбъекта) Тогда 
				ИмяОбъекта = ПараметрыЗапуска.ИмяОбъекта;
			КонецЕсли;	
			
			ОчиститьДанныеВыбраннойВерсииНаКлиенте(ПараметрыЗапуска.ВыбраннаяДата, ТипДанных, ИмяОбъекта);
				
		Иначе
			ОчиститьДанныеВыбраннойВерсииНаКлиенте(ПараметрыЗапуска.ВыбраннаяДата);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры


// Процедура - Очистить данные выбранной версии на клиенте
//
// Параметры:
//  ВыбраннаяДата	 - Дата - Дата по которую удаляем данные из истории данных
//
&НаКлиенте
Процедура ОчиститьДанныеВыбраннойВерсииНаКлиенте(ВыбраннаяДата, ТипДанных = "", ИмяОбъекта = "")

	ДанныеДляОчисткиИсторииДанных = Новый Структура("ПоследнееОбновлениеДанных");
	ДанныеДляОчисткиИсторииДанных.Вставить("ВыбраннаяДата", ВыбраннаяДата);
	ДанныеДляОчисткиИсторииДанных.Вставить("ИдентификаторФормы", Новый УникальныйИдентификатор);
	ДанныеДляОчисткиИсторииДанных.Вставить("Прогресс", 0);
	ДанныеДляОчисткиИсторииДанных.Вставить("ОбъектыНаУдаление", Новый Массив);		                                                   
	ДанныеДляОчисткиИсторииДанных.Вставить("ДатаНачала", ТекущаяУниверсальнаяДатаВМиллисекундах());
	ДанныеДляОчисткиИсторииДанных.Вставить("ВсегоОбъектов", 0); 
	ДанныеДляОчисткиИсторииДанных.Вставить("ОдинШаг", 0);
	ДанныеДляОчисткиИсторииДанных.Вставить("ТекущийШаг", 0);
	
	// Инициализация формы прогресса выполнения
	ФормаПрогресса = Неопределено;
	ИмяФормыПрогресса = ПолучитьИмяФормы("ФормаПрогресса");
	Если ИмяФормыПрогресса <> Неопределено Тогда
			
		ПараметрыФормы = Новый Структура;
		ФормаПрогресса = ПолучитьФорму(ИмяФормыПрогресса, ПараметрыФормы, ЭтотОбъект, ДанныеДляОчисткиИсторииДанных.ИдентификаторФормы);
		ФормаПрогресса.Открыть();
			
	КонецЕсли; 
		
		
	Если ЗначениеЗаполнено(ТипДанных)
		И ЗначениеЗаполнено(ИмяОбъекта) Тогда 
		// Чистим текущие данные
	
		ТекущееСостояние = НСтр("ru='Обработка объекта'; SYS='SDCH.Main.CurrentProgressTitle'", "ru");
		ТекущееСообщение = СтрШаблон("%1: %2.%3", ТекущееСостояние, ТипДанных, ИмяОбъекта);
		ОбновитьПрогрессНаФормеПрогресса(ДанныеДляОчисткиИсторииДанных, ТекущееСообщение);
		
		СписокОшибок = ОшибкаДанныхПоОбъектуМетаданныхНаДату(ТипДанных, ИмяОбъекта, ВыбраннаяДата, ВПривилегированномРежиме);		
		ОбновитьПрогрессНаФормеПрогресса(ДанныеДляОчисткиИсторииДанных, ТекущееСообщение, СписокОшибок);  
		
		ПодключитьОбработчикОжидания("ОбновитьФормаПрогресса", 0.1, Истина);
		
	Иначе 
		// Чистим все	
		
		ВыбранныеМетаданные = СписокМетаданныхТекущейВерсии.ВыгрузитьЗначения();	
		ДанныеДляОчисткиИсторииДанных.Вставить("ВыбранныеМетаданные", ВыбранныеМетаданные);
		
		ТекущееСообщение = СтрШаблон("%1", НСтр("ru='Идет подсчет версий объектов'; SYS='SDCH.Main.CalculateObjectVersionNumber'", "ru"));                 
		ОбновитьПрогрессНаФормеПрогресса(ДанныеДляОчисткиИсторииДанных, ТекущееСообщение);
		УвеличениеЗначенияИндикатораВыполненияОчисткиДанных(ДанныеДляОчисткиИсторииДанных, 1);
		
		ПодключитьОбработчикОжидания("ШагФоновогоЗаданияПроцессаОчисткиДанных", 0.1, Истина);		

	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ШагФоновогоЗаданияПроцессаОчисткиДанных() Экспорт

	Если ДанныеДляОчисткиИсторииДанных.ВыбранныеМетаданные.Количество() = 0 Тогда
		                                        
		ДанныеДляОчисткиИсторииДанных.ОдинШаг = Окр(ДанныеДляОчисткиИсторииДанных.ВсегоОбъектов * 0.01);
		ДанныеДляОчисткиИсторииДанных.ТекущийШаг = 0;
		
		ПодключитьОбработчикОжидания("ОбновитьФормаПрогресса", 0.1, Истина);
		
		Возврат;
		
	КонецЕсли;
	
	ТекущиеОбъекты = ДанныеДляОчисткиИсторииДанных.ВыбранныеМетаданные.Получить(0);
	ПодсчитатьВсегоОбъектовДляУдаления(ДанныеДляОчисткиИсторииДанных, ТекущиеОбъекты);
	ДанныеДляОчисткиИсторииДанных.ВыбранныеМетаданные.Удалить(0);
		
	ПодключитьОбработчикОжидания("ШагФоновогоЗаданияПроцессаОчисткиДанных", 0.1, Истина);	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПодсчитатьВсегоОбъектовДляУдаления(ДанныеДляОчисткиИсторииДанных, ТипДанных)
	
	Для Каждого ОбъектМетаданных Из Метаданные[ТипДанных] Цикл 
		
		ДанныеДляОчисткиИсторииДанных.ВсегоОбъектов = ДанныеДляОчисткиИсторииДанных.ВсегоОбъектов + 1;
		ДанныеДляОчисткиИсторииДанных.ОбъектыНаУдаление.Добавить(Новый Структура("ТипДанных, ИмяОбъекта", ТипДанных, ОбъектМетаданных.Имя));
		
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьФормаПрогресса() Экспорт 
	
	Если ДанныеДляОчисткиИсторииДанных.ОбъектыНаУдаление.Количество() = 0 Тогда
		ФинальноеЗначение = 100 - ДанныеДляОчисткиИсторииДанных.Прогресс;
		
		УвеличениеЗначенияИндикатораВыполненияОчисткиДанных(ДанныеДляОчисткиИсторииДанных, ФинальноеЗначение);
		
		СообщениеОЗавершенииОчистки = НСтр("ru='Очистка истории данных завершена. Общее время выполнения:'; SYS='SDCH.Main.AllDataHistoryHasBeenWiped'", "ru");
		
		Продолжительность = ТекущаяУниверсальнаяДатаВМиллисекундах() - ДанныеДляОчисткиИсторииДанных.ДатаНачала;
		
		ОбновитьПрогрессНаФормеПрогресса(ДанныеДляОчисткиИсторииДанных, 
			СтрШаблон("%1 %2 %3", СообщениеОЗавершенииОчистки, Продолжительность, НСтр("ru='мс.'; SYS='SDCH.Main.AllDataHistoryHasBeenWipedSec'", "ru")));
			
		Если ФормаПрогресса <> Неопределено Тогда 
			
			ФормаПрогресса.УстановитьВозможностьЗакрытияФормы();
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ТекущийОбъектМетаданных = ДанныеДляОчисткиИсторииДанных.ОбъектыНаУдаление.Получить(0);
		
	ТекущееСостояние = НСтр("ru='Обработка объекта'; SYS='SDCH.Main.CurrentProgressTitle'", "ru");
	ТекущееСообщение = СтрШаблон("%1: %2.%3", ТекущееСостояние, ТекущийОбъектМетаданных.ТипДанных, ТекущийОбъектМетаданных.ИмяОбъекта);
	ОбновитьПрогрессНаФормеПрогресса(ДанныеДляОчисткиИсторииДанных, ТекущееСообщение);
	
	СписокОшибок = ОшибкаДанныхПоОбъектуМетаданныхНаДату(ТекущийОбъектМетаданных.ТипДанных, ТекущийОбъектМетаданных.ИмяОбъекта, 
		ДанныеДляОчисткиИсторииДанных.ВыбраннаяДата, ВПривилегированномРежиме);
		
	ОбновитьПрогрессНаФормеПрогресса(ДанныеДляОчисткиИсторииДанных, "", СписокОшибок);
	
	Если ДанныеДляОчисткиИсторииДанных.ТекущийШаг = ДанныеДляОчисткиИсторииДанных.ОдинШаг Тогда
		ДанныеДляОчисткиИсторииДанных.ТекущийШаг = 0;
		УвеличениеЗначенияИндикатораВыполненияОчисткиДанных(ДанныеДляОчисткиИсторииДанных, 1);
		
	Иначе
		ДанныеДляОчисткиИсторииДанных.ТекущийШаг = ДанныеДляОчисткиИсторииДанных.ТекущийШаг + 1;
		
	КонецЕсли;
	
	ДанныеДляОчисткиИсторииДанных.ОбъектыНаУдаление.Удалить(0);
	
	ПодключитьОбработчикОжидания("ОбновитьФормаПрогресса", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПрогрессНаФормеПрогресса(ДанныеДляОчисткиИсторииДанных, ТекущееСообщение, СписокОшибок = Неопределено)
	
	Если ЗначениеЗаполнено(ТекущееСообщение) Тогда 
		Если ФормаПрогресса <> Неопределено Тогда
			
			ФормаПрогресса.ТекущийСтатус = ТекущееСообщение;
			ФормаПрогресса.Прогресс = ДанныеДляОчисткиИсторииДанных.Прогресс;
			
		Иначе
			
			Message(ТекущееСообщение);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ФормаПрогресса <> Неопределено Тогда
		
		ФормаПрогресса.Прогресс = ДанныеДляОчисткиИсторииДанных.Прогресс;
		
	КонецЕсли;
	
	Если СписокОшибок <> Неопределено Тогда
		Для Каждого ТекущаяОшибка Из СписокОшибок Цикл 
			Если ФормаПрогресса = Неопределено Тогда 
				
		    	Message(ТекущаяОшибка);  
				
			Иначе
				
				ФормаПрогресса.СписокОшибок.Добавить(ТекущаяОшибка);
				
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличениеЗначенияИндикатораВыполненияОчисткиДанных(ДанныеДляОчисткиИсторииДанных, ЗначениеУвеличения)
	
	Если ФормаПрогресса <> Неопределено Тогда	
		ДанныеДляОчисткиИсторииДанных.Прогресс = ДанныеДляОчисткиИсторииДанных.Прогресс + ЗначениеУвеличения;
		ФормаПрогресса.Прогресс = ДанныеДляОчисткиИсторииДанных.Прогресс;
	КонецЕсли;
	
КонецПроцедуры

// Функция - Получить имя формы
//
// Параметры:
//  ИмяФормы - Строка - Имя формы 
// 
// Возвращаемое значение:
//  Строка - Полный путь к форме
//
&НаКлиенте
Функция ПолучитьИмяФормы(ИмяФормы)
	Перем Результат;

	Результат = ПолноеИмяОбработки + ".Форма";
	Если Не ПустаяСтрока(ИмяФормы) Тогда
		Результат = Результат + "." + ИмяФормы;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция - Ошибка данных по объекту метаданных на дату
//
// Параметры:
//  ТипДанных 				- Строка - Тип Метаданных. Пример: "Документы"
//	ИмяОбъекта				- Строка - Имя объекта метаданных. Пример: "ПриобретениеТоваровУслуг"
//  ДатаУдаления			- Дата - Дата по которую данные из истории данных будут удалены 
//  ВПривилегированномРежиме- Булево - Признак запуска в привилегированном режиме
// 
// Возвращаемое значение:
//  Массив - Массив ошибок
//
&НаСервереБезКонтекста
Функция ОшибкаДанныхПоОбъектуМетаданныхНаДату(ТипДанных, ИмяОбъекта, ДатаУдаления, ВПривилегированномРежиме)
	
	МассивОшибок = Новый Массив;
	
	ВключенПривилегированныйРежим = Ложь;
		
	Если ВПривилегированномРежиме Тогда 
		Если Не ПривилегированныйРежим() Тогда  
			ВключенПривилегированныйРежим = Истина;
			УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
		КонецЕсли;	
	КонецЕсли;
	
	Попытка                
		
		ТипМетаданных = Метаданные[ТипДанных][ИмяОбъекта];
		ИсторияДанных.УдалитьВерсии(ТипМетаданных, ДатаУдаления);		
	
	Исключение    
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщениеОбОшибке = СтрШаблон("%1.%2: %3", ТипДанных, ИмяОбъекта, ТекстОшибки);
			
		
		МассивОшибок.Добавить(СообщениеОбОшибке);
			
	КонецПопытки;
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;

	
	Возврат МассивОшибок;
	
КонецФункции


#КонецОбласти


&НаСервереБезКонтекста
Функция НовоеДеревоМетаданных()
	
    // "Объекты метаданных"
	ДеревоМетаданных = Новый ДеревоЗначений;
	ДеревоМетаданных.Колонки.Добавить("Имя", 			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки()));
	ДеревоМетаданных.Колонки.Добавить("Синоним", 		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки()));
    ДеревоМетаданных.Колонки.Добавить("ПолноеИмя", 		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки()));
	ДеревоМетаданных.Колонки.Добавить("ДанныеПоиска", 	Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки()));

	ДеревоМетаданных.Колонки.Добавить("Пометка", 				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1)));
	ДеревоМетаданных.Колонки.Добавить("ИндексКартинки", 		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2)));	
	ДеревоМетаданных.Колонки.Добавить("ВключеноВКонфигураторе", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1)));
	ДеревоМетаданных.Колонки.Добавить("ИспользованиеПолей", 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1)));
	
	// Подчиненное дерево "Поля и табличные части"
	ДеревоМетаданных.Колонки.Добавить("РеквизитыОбъекта", Новый ОписаниеТипов("ДеревоЗначений")); // РеквизитыДереваМетаданных()
	
	Возврат ДеревоМетаданных;
	
	
КонецФункции	

&НаСервереБезКонтекста
Функция РеквизитыДереваМетаданных()

	// Собираем таблицу для более тонкой настройки истории данных 
	РеквизитыОбъекта = Новый ДеревоЗначений;
	РеквизитыОбъекта.Колонки.Добавить("Имя", 		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки()));
	РеквизитыОбъекта.Колонки.Добавить("Синоним", 	Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки()));
	РеквизитыОбъекта.Колонки.Добавить("ПолноеИмя", 	Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки()));
						
	РеквизитыОбъекта.Колонки.Добавить("Пометка", 				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1)));
	РеквизитыОбъекта.Колонки.Добавить("ИндексКартинки", 		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2)));	
	РеквизитыОбъекта.Колонки.Добавить("ВключеноВКонфигураторе", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1)));
	РеквизитыОбъекта.Колонки.Добавить("ИспользованиеПолей", 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1)));

	Возврат РеквизитыОбъекта;
	
КонецФункции

#КонецОбласти
      

#Область ОтладкаОбработки

&НаКлиенте
Процедура РежимОтладкиПриИзменении(Элемент)
	Элементы.ГруппаОтладки.Видимость = РежимОтладки;
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаДанных(Команда)
	
	ТекущиеДанные = Элементы.ДеревоМетаданных.ТекущиеДанные; 
	
	Если ТекущиеДанные <> Неопределено Тогда 
		
		ВерхнийУровеньДерева = ТекущиеДанные.ПолучитьРодителя();
		
		ТекущиеНастройкиПоОбъекту.Очистить();
		
		Если ВерхнийУровеньДерева <> Неопределено Тогда
			Если Не ПустаяСтрока(ТекущиеДанные.ПолноеИмя) Тогда 
				
				ИмяОбъектаРазделенное = СтрРазделить(ТекущиеДанные.ПолноеИмя, ".", Ложь);
				
				Если ИмяОбъектаРазделенное.Количество() = 2 Тогда
					
					СтруктураНастройкиИсторииДанных = НастройкиИсторииДанных(ИмяОбъектаРазделенное[0], ИмяОбъектаРазделенное[1]);	
					ЕстьНастройкаИД = СтруктураНастройкиИсторииДанных.ЕстьНастройка;
					ВключенИД 		= СтруктураНастройкиИсторииДанных.Использование;
					
					Для каждого ЭлСоответствия Из СтруктураНастройкиИсторииДанных.ИспользованиеПолей Цикл 
						
						 новСтрока = ТекущиеНастройкиПоОбъекту.Добавить();
						 новСтрока.КлючОбъекта	= ЭлСоответствия.Ключ;
						 новСтрока.Включено		= ЭлСоответствия.Значение;
						 
					КонецЦикла;	
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти


