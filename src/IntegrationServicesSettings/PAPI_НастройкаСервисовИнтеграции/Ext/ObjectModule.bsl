#Область ИнициализацияДополнительныеОтчетыИОбработки

// Возвращает сведения о внешней обработке.
Функция СведенияОВнешнейОбработке() Экспорт
	
	Перем ПараметрыРегистрации;

    Если ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		
		МодульДополнительныеОтчетыИОбработки = ОбщийМодуль("ДополнительныеОтчетыИОбработки");
		МодульДополнительныеОтчетыИОбработкиКлиентСервер = ОбщийМодуль("ДополнительныеОтчетыИОбработкиКлиентСервер");

		ПараметрыРегистрации = МодульДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.4.5.71");
		ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
			
		ПараметрыРегистрации.Вид = МодульДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
		ПараметрыРегистрации.Версия = "2024.08.25";
			
		НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
		НоваяКоманда.Представление = НСтр("ru = 'Настройка сервисов интеграции'");
		НоваяКоманда.Идентификатор = "НастройкаСервисовИнтеграции";
		НоваяКоманда.Использование = МодульДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
		НоваяКоманда.ПоказыватьОповещение = Ложь;
		
	КонецЕсли;
		
	Возврат ПараметрыРегистрации;
	
КонецФункции


#КонецОбласти

#Область ПрограммныйИнтерфейс

// Функция - Прочитать настройки сервисов интеграций ВJSON
// 
// Возвращаемое значение:
//  Строка - Массив настроек в формате JSON
//
Функция ПрочитатьНастройкиСервисовИнтеграцийВJSON() Экспорт 

	МассивНастроек = Новый Массив;
	
	Для Каждого текСервис Из Метаданные.СервисыИнтеграции Цикл 

		СтруктураНастройки = Новый Структура;
		СтруктураНастройки.Вставить("Активность", СервисыИнтеграции[текСервис.Имя].ПолучитьАктивность()); 
		СтруктураНастройки.Вставить("Сервис", текСервис.Имя);
		СтруктураНастройки.Вставить("НастройкиСервиса", УстановитьТекущиеЗначенияСтроки(текСервис.Имя));
		
		МассивНастроек.Добавить(СтруктураНастройки);
		
	КонецЦикла;
	
	РезультатJS = ЗаписатьДанныеВJSON(, МассивНастроек);
	
	Результат = ?(РезультатJS.Отработал, РезультатJS.Результат, "");
	
	Возврат Результат;
	
КонецФункции	

// Функция - Записать настройки сервисов интеграций из JSON
//
// Параметры:
//  ТекстНастроек	 - Строка - Настройки в формате JSON 
// 
// Возвращаемое значение:
//  Булево - Статус. Применились настройки или нет
//
Функция ЗаписатьНастройкиСервисовИнтеграцийИзJSON(ТекстНастроек) Экспорт 
	
	Результат = Ложь;
	
	РезультатJS = ЧтениеДанныхИзJSON(ТекстНастроек);
	
	Если РезультатJS.Отработал Тогда 
		
		МассивНастроек = РезультатJS.Результат;
				
		Если ТипЗнч(МассивНастроек) = Тип("Массив") Тогда 
			

			ТекстОшибки = "";

			Для Каждого текНастройки Из МассивНастроек Цикл
				
				РезультатЗаписи = ЗаписатьНастройкиНаСервере(текНастройки);
				
				Если Не РезультатЗаписи.Отработал Тогда 

					ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + РезультатЗаписи.ТекстОшибки;
					
				КонецЕсли;
			
			КонецЦикла;	   
			
			Если Не ПустаяСтрока(ТекстОшибки) Тогда 
				
				КраткоеСообщениеПользователю(РезультатЗаписи.ТекстОшибки);
				
			Иначе 
				
				Результат = Истина;
				
			КонецЕсли;	
			
		ИначеЕсли ТипЗнч(МассивНастроек) = Тип("Структура") Тогда 
			
			РезультатЗаписи = ЗаписатьНастройкиНаСервере(МассивНастроек);
			
			Если Не РезультатЗаписи.Отработал Тогда 

				КраткоеСообщениеПользователю(РезультатЗаписи.ТекстОшибки);
				
			КонецЕсли;	
			
		Иначе  
			
			Возврат Результат;
			
		КонецЕсли;	
		
	Иначе
		
		КраткоеСообщениеПользователю(РезультатJS.ТекстОшибки);
		
	КонецЕсли;	
	
	Возврат Результат;	
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция возвращает чаще всего используемые ПараметрыЗаписиJSON (JSONWriterSettings)
// 
// Возвращаемое значение:
//  Результат - Структура - Стандартное заполнение
//
Функция СтандартныеПараметрыJSON() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПереносСтрок",					ПереносСтрокJSON.Авто);
	Результат.Вставить("СимволОтступа",					" ");
	Результат.Вставить("ИспользоватьДвойныеКавычки",	Истина);
	Результат.Вставить("ЭкранированиеСимволов",			ЭкранированиеСимволовJSON.Нет);
	Результат.Вставить("ЭкранироватьАмперсанд",			Ложь);
	Результат.Вставить("ЭкранироватьОдинарныеКавычки",	Ложь);
	Результат.Вставить("ЭкранироватьРазделителиСтрок",	Ложь);
	Результат.Вставить("ЭкранироватьУгловыеСкобки",		Ложь);
	Результат.Вставить("ЭкранироватьСлеш",				Ложь);	
	
	Возврат Результат;		
	
КонецФункции

// Функция переводит данные в формат JSON
//
// Параметры:
//  ВходящиеПараметры	 - Структура - Параметры формирование JSON
//  ВходныеДанные		 - ЛюбоеЗначение - Данные которые нужно перевести в JSON
// 
// Возвращаемое значение:
//  Результат - Структура
//  	Отработал - Булево - Выполнено или нет
//  	ТекстОшибки - Строка - Текст ошибки если функция отработала с ошибкой
//  	Результат - Строка - JSON
//
Функция ЗаписатьДанныеВJSON(ВходящиеПараметры = Неопределено, ВходныеДанные = "") Экспорт
	
	Результат = Новый Структура("Отработал, ТекстОшибки", Истина, "");
	
	Если ВходящиеПараметры = Неопределено Тогда 
		ВходящиеПараметры = СтандартныеПараметрыJSON(); 	
	КонецЕсли;	
	
	ПараметрыJSON	= Новый ПараметрыЗаписиJSON(ВходящиеПараметры.ПереносСтрок,
												ВходящиеПараметры.СимволОтступа,
												ВходящиеПараметры.ИспользоватьДвойныеКавычки,
												ВходящиеПараметры.ЭкранированиеСимволов,
												ВходящиеПараметры.ЭкранироватьУгловыеСкобки,
												ВходящиеПараметры.ЭкранироватьРазделителиСтрок,
												ВходящиеПараметры.ЭкранироватьАмперсанд,
												ВходящиеПараметры.ЭкранироватьОдинарныеКавычки,
												ВходящиеПараметры.ЭкранироватьСлеш);
	
	
	Попытка
		ЗаписьJSON						= Новый ЗаписьJSON;
		ЗаписьJSON.ПроверятьСтруктуру 	= Истина;
		ЗаписьJSON.УстановитьСтроку(ПараметрыJSON);	
		ЗаписатьJSON(ЗаписьJSON, ВходныеДанные);
		Результат.Вставить("Результат",	ЗаписьJSON.Закрыть());
	Исключение
		Результат.Отработал 			= Ложь;
		Результат.ТекстОшибки 			= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция Десериализует строку JSON в формат данных 1С
//
// Параметры:
//  СтрокаJSON - Строка - JSON
// 
// Возвращаемое значение:
//  Результат - Структура
//  	Отработал - Булево - Выполнено или нет
//  	ТекстОшибки - Строка - Текст ошибки если функция отработала с ошибкой
//  	Результат - ЛюбоеЗначение - Данные в формате 1С
//
Функция ЧтениеДанныхИзJSON(СтрокаJSON) Экспорт
	
	Результат = Новый Структура("Отработал, ТекстОшибки", Истина, "");
						
	Попытка
		ЧтениеJSON 				= Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
		Результат.Вставить("Результат", ПрочитатьJSON(ЧтениеJSON));
	Исключение
		Результат.Отработал 	= Ложь;
		Результат.ТекстОшибки 	= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Процедура - Краткое сообщение пользователю
//
// Параметры:
//  Текст	 - Строка	 - Текст сообщения
//  Поле	 - Строка	 - Поле в котором есть ошибка (Необязательна)
//
Процедура КраткоеСообщениеПользователю(Текст, Поле = "") Экспорт
       
	Сообщение 		= Новый СообщениеПользователю;
	Сообщение.Текст = Текст;  
	
	Если Не ПустаяСтрока(Поле) Тогда 
		Сообщение.Поле 	= Поле; 
	КонецЕсли;
	
	Сообщение.Сообщить();

КонецПроцедуры 

// Функция - Установить текущие значения строки
//
// Параметры:
//  Сервис	 - Строка - Имя сервиса
// 
// Возвращаемое значение:
//  Структура - Настройки сервиса интеграции:
//  	АдресВнешнегоСервисаИнтеграции 				- Строка - URL-адрес, по которому доступен сервис интеграции.
//      ИмяПользователя 							- Строка - От чьего имени работают сервисы интеграции.
//      ИмяПользователяВнешнегоСервисаИнтеграции 	- Строка - Имя пользователя, под которым выполняется соединение с сервисом интеграции.
//      ПарольПользователяВнешнегоСервисаИнтеграции - Строка - Пароль пользователя для соединения с сервисом интеграции.
//
Функция УстановитьТекущиеЗначенияСтроки(Сервис) Экспорт 
	
	Результат = Новый Структура;
	Если ЗначениеЗаполнено(Сервис) Тогда 
		
		НастройкиСервиса  = СервисыИнтеграции[Сервис].ПолучитьНастройки();
			
		Результат.Вставить("АдресВнешнегоСервисаИнтеграции", 				
			НастройкиСервиса.АдресВнешнегоСервисаИнтеграции); 
			
		Результат.Вставить("ИмяПользователя", 								
			НастройкиСервиса.ИмяПользователя);   
			
        Результат.Вставить("ИмяПользователяВнешнегоСервисаИнтеграции", 		
			НастройкиСервиса.ИмяПользователяВнешнегоСервисаИнтеграции); 
			
        Результат.Вставить("ПарольПользователяВнешнегоСервисаИнтеграции", 	
			НастройкиСервиса.ПарольПользователяВнешнегоСервисаИнтеграции);	
	Иначе
		Результат.Вставить("АдресВнешнегоСервисаИнтеграции", "");
		Результат.Вставить("ИмяПользователя", "");
	    Результат.Вставить("ИмяПользователяВнешнегоСервисаИнтеграции", "");
	    Результат.Вставить("ПарольПользователяВнешнегоСервисаИнтеграции", "");	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции    

// Функция - Записать настройки на сервере
//
// Параметры:
//  СтруктураСервиса - Структура - Структура содержит настройки сервиса интеграции
//		Активность 		 - Булево - Активность сервиса интеграции
//		Сервис 			 - Строка - Имя сервиса
//		НастройкиСервиса - Структура - Структура настройки:
//			АдресВнешнегоСервисаИнтеграции 				- Строка - URL-адрес, по которому доступен сервис интеграции.
//			ИмяПользователя 							- Строка - От чьего имени работают сервисы интеграции.
//			ИмяПользователяВнешнегоСервисаИнтеграции 	- Строка - Имя пользователя, под которым выполняется соединение с сервисом интеграции.
//			ПарольПользователяВнешнегоСервисаИнтеграции - Строка - Пароль пользователя для соединения с сервисом интеграции.
// 
// Возвращаемое значение:
//  Результат - Структура
//  	Отработал 	- Булево - Выполнено или нет
//  	ТекстОшибки - Строка - Текст ошибки если функция отработала с ошибкой
//
Функция ЗаписатьНастройкиНаСервере(СтруктураСервиса) 
	
	Результат = Новый Структура("Отработал, ТекстОшибки", Истина, "");
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;
	
			
	Если Не СтруктураСервиса.Свойство("Сервис") Тогда 
		
		Результат.Отработал 	= Ложь;
		Результат.ТекстОшибки 	= НСтр("ru = 'Отсутствует имя сервиса'"); 
		
		Возврат Результат;
		
	Иначе
		
		текСервис = СтруктураСервиса.Сервис;
		
		Если ПустаяСтрока(текСервис) Тогда 
			Результат.Отработал 	= Ложь;
			Результат.ТекстОшибки 	= НСтр("ru = 'Отсутствует имя сервиса'");	
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если СтруктураСервиса.Свойство("НастройкиСервиса") 
		И ТипЗнч(СтруктураСервиса.НастройкиСервиса) = Тип("Структура") Тогда
		
		НастройкиСервиса = СтруктураСервиса.НастройкиСервиса;
		
	Иначе 
		НастройкиСервиса = Новый Структура;
		НастройкиСервиса.Вставить("АдресВнешнегоСервисаИнтеграции", "");
		НастройкиСервиса.Вставить("ИмяПользователя", "");
	    НастройкиСервиса.Вставить("ИмяПользователяВнешнегоСервисаИнтеграции", "");
	    НастройкиСервиса.Вставить("ПарольПользователяВнешнегоСервисаИнтеграции", "");	
	КонецЕсли;	
	
	Если СтруктураСервиса.Свойство("Активность") 
		И ТипЗнч(СтруктураСервиса.Активность) = Тип("Булево") Тогда 
		Активность = СтруктураСервиса.Активность;
	Иначе
		Активность = Ложь;
	КонецЕсли;	
	
	НастройкиСИ = Новый НастройкиСервисаИнтеграции;
	НастройкиСИ.АдресВнешнегоСервисаИнтеграции 				= ?(НастройкиСервиса.Свойство("АдресВнешнегоСервисаИнтеграции"),
		НастройкиСервиса.АдресВнешнегоСервисаИнтеграции, ""); 
			
	НастройкиСИ.ИмяПользователя 							= ?(НастройкиСервиса.Свойство("ИмяПользователя"),
		НастройкиСервиса.ИмяПользователя, "");  
			
	НастройкиСИ.ИмяПользователяВнешнегоСервисаИнтеграции 	= ?(НастройкиСервиса.Свойство("ИмяПользователяВнешнегоСервисаИнтеграции"),
		НастройкиСервиса.ИмяПользователяВнешнегоСервисаИнтеграции, ""); 
			
	НастройкиСИ.ПарольПользователяВнешнегоСервисаИнтеграции = ?(НастройкиСервиса.Свойство("ПарольПользователяВнешнегоСервисаИнтеграции"),
		НастройкиСервиса.ПарольПользователяВнешнегоСервисаИнтеграции, "");
			
	Попытка	
			
		СервисыИнтеграции[текСервис].УстановитьНастройки(НастройкиСИ);	
		СервисыИнтеграции[текСервис].УстановитьАктивность(Активность);
		
	Исключение
		Результат.Отработал 	= Ложь;
		Результат.ТекстОшибки 	= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;	
		
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДополнительныеОбработкиИОтчеты
// Возвращает Истина, если подсистема существует.
//
// Параметры:
//  ПолноеИмяПодсистемы - Строка - полное имя объекта метаданных подсистема без слов "Подсистема.".
//                        Например: "СтандартныеПодсистемы.БазоваяФункциональность".
//
// Пример вызова необязательной подсистемы:
//
//  Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
//  	МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
//  	МодульУправлениеДоступом.<Имя метода>();
//  КонецЕсли;
//
// Возвращаемое значение:
//  Булево
//
Функция ПодсистемаСуществует(ПолноеИмяПодсистемы) Экспорт
	
	ИменаПодсистем = ИменаПодсистем();
	Возврат ИменаПодсистем.Получить(ПолноеИмяПодсистемы) <> Неопределено;
	
КонецФункции

// Возвращает соответствие имен подсистем и значения Истина;
Функция ИменаПодсистем() Экспорт
	
	Возврат Новый ФиксированноеСоответствие(ИменаПодчиненныхПодсистем(Метаданные));
	
КонецФункции

Функция ИменаПодчиненныхПодсистем(РодительскаяПодсистема)
	
	Имена = Новый Соответствие;
	
	Для Каждого ТекущаяПодсистема Из РодительскаяПодсистема.Подсистемы Цикл
		
		Имена.Вставить(ТекущаяПодсистема.Имя, Истина);
		ИменаПодчиненных = ИменаПодчиненныхПодсистем(ТекущаяПодсистема);
		
		Для каждого ИмяПодчиненной Из ИменаПодчиненных Цикл
			Имена.Вставить(ТекущаяПодсистема.Имя + "." + ИмяПодчиненной.Ключ, Истина);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Имена;
	
КонецФункции

// Возвращает ссылку на общий модуль по имени.
//
// Параметры:
//  Имя          - Строка - имя общего модуля, например:
//                 "ОбщегоНазначения",
//                 "ОбщегоНазначенияКлиент".
//
// Возвращаемое значение:
//  ОбщийМодуль
//
Функция ОбщийМодуль(Имя) Экспорт
	
	Если Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено Тогда
		Модуль = Вычислить(Имя); // АПК:488 "Вычислить" вместо "ОбщегоНазначения.ВычислитьВБезопасномРежиме()", так как это автономная обработка.
	Иначе
		Модуль = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(НСтр("ru = 'Общий модуль ""%1"" не существует.'"), Имя);
	КонецЕсли;
	
	Возврат Модуль;
	
КонецФункции

Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено)
	
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
	
	Возврат СтрокаПодстановки;
КонецФункции


#КонецОбласти

