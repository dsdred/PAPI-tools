
//MIT License

//Copyright (c) 2024 Dmitrii Sidorenko

//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:

//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.

//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РучнаяАктивация = Ложь;
	
	КартинкаПоказатьПароль 	= БиблиотекаКартинок.ПоказатьПароль;
	КартинкаСкрытьПароль 	= БиблиотекаКартинок.СкрытьПароль;
		
	ЗаполнитьСписокДанными();
	
	Элементы.ПарольПользователяВнешнегоСервисаИнтеграции.РежимПароля = Истина;
	
	// Для получения списка пользователей нужны административные права++
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;	

	ВыборкаПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей(); // Получаем список пользователей   
 	Для Каждого ЭлементМассива Из ВыборкаПользователей Цикл 	
		
		Элементы.ИмяПользователя.СписокВыбора.Добавить(ЭлементМассива.Имя,ЭлементМассива.Имя);

	КонецЦикла; 
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;
	// Для получения списка пользователей нужны административные права--
	
КонецПроцедуры 

#КонецОбласти


#Область ОбработчикиСписка

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)  
	
	Если Не РучнаяАктивация Тогда 
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;   
		
		Если ТекущиеДанные <> Неопределено Тогда 
			стрНастройкиСервиса = УстановитьТекущиеЗначенияСтроки(ТекущиеДанные.Имя);   
			
			АдресВнешнегоСервисаИнтеграции 				= стрНастройкиСервиса.АдресВнешнегоСервисаИнтеграции;
			ИмяПользователя 							= стрНастройкиСервиса.ИмяПользователя;
			ИмяПользователяВнешнегоСервисаИнтеграции 	= стрНастройкиСервиса.ИмяПользователяВнешнегоСервисаИнтеграции;
			ПарольПользователяВнешнегоСервисаИнтеграции = стрНастройкиСервиса.ПарольПользователяВнешнегоСервисаИнтеграции;
		КонецЕсли;  
		
	Иначе
		РучнаяАктивация = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивностьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		УстановитьАктивностьНаСервере(ТекущиеДанные.Имя, ТекущиеДанные.Активность); 
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	Если Список.Количество() > 0 Тогда 
		Для Каждого ТекущиеДанные Из Список Цикл 
			ТекущиеДанные.Активность = Ложь;
			УстановитьАктивностьНаСервере(ТекущиеДанные.Имя, ТекущиеДанные.Активность);  	
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	Если Список.Количество() > 0 Тогда 
		Для Каждого ТекущиеДанные Из Список Цикл
			ТекущиеДанные.Активность = Истина;
			УстановитьАктивностьНаСервере(ТекущиеДанные.Имя, ТекущиеДанные.Активность); 	
		КонецЦикла;	
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийСтраницаНастройки

&НаКлиенте
Процедура ЗаписатьНастройки(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ЗаписатьНастройкиНаСервере(ТекущиеДанные.Имя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПароль(Команда)
	
	Элементы.ПарольПользователяВнешнегоСервисаИнтеграции.РежимПароля = Не Элементы.ПарольПользователяВнешнегоСервисаИнтеграции.РежимПароля;
	Если Элементы.ПарольПользователяВнешнегоСервисаИнтеграции.РежимПароля Тогда 
		Элементы.ПоказатьПароль.Картинка = КартинкаПоказатьПароль; 
	Иначе	
		Элементы.ПоказатьПароль.Картинка = КартинкаСкрытьПароль;
	КонецЕсли;
	
	РучнаяАктивация = Истина;
	
КонецПроцедуры

#КонецОбласти     


#Область СтраницаПереносНастроек

&НаКлиенте
Процедура ПрочитатьНастройки(Команда)  
	
	РучнаяАктивация = Истина;	
	ПрочитатьНастройкиНаСервере(); 
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиНаСервере()
	ТекстНастроек = ЭтотОбъект().ПрочитатьНастройкиСервисовИнтеграцийВJSON();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройки(Команда)
	
	РучнаяАктивация = Ложь;
    ЗагрузитьНастройкиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиНаСервере()  
	
	ЭтотОбъект().ЗаписатьНастройкиСервисовИнтеграцийИзJSON(ТекстНастроек);  
	ЗаполнитьСписокДанными();
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаНастройки;
	
КонецПроцедуры

#КонецОбласти   

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСписокДанными()
	
	перСписокМетаданных = СтруктураСписка();
	
	Для Каждого текСервис Из Метаданные.СервисыИнтеграции Цикл 
					
		НоваяСтрока = перСписокМетаданных.Добавить(); 
		НоваяСтрока.Активность = СервисыИнтеграции[текСервис.Имя].ПолучитьАктивность(); //УстановитьАктивность()
		НоваяСтрока.Имя = текСервис.Имя;
				
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(перСписокМетаданных, "Список");
	
КонецПроцедуры	


&НаСервере
Функция УстановитьТекущиеЗначенияСтроки(Сервис) 
	
	Результат = ЭтотОбъект().УстановитьТекущиеЗначенияСтроки(Сервис);
	
	Возврат Результат;
	
КонецФункции

 &НаСервереБезКонтекста
Функция СтруктураСписка()
	
    // "Объекты метаданных"
	ТЗСписокСписок = Новый ТаблицаЗначений;
	ТЗСписокСписок.Колонки.Добавить("Имя", 							Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки()));
	ТЗСписокСписок.Колонки.Добавить("Активность", 					Новый ОписаниеТипов("Булево"));
	
	// Подчиненное дерево "Поля и табличные части"
	ТЗСписокСписок.Колонки.Добавить("НастройкиСервисаИнтеграции", 	Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Возврат ТЗСписокСписок;	
	
КонецФункции	

&НаСервереБезКонтекста
Процедура УстановитьАктивностьНаСервере(Сервис, Активность)
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;
	
	СервисыИнтеграции[Сервис].УстановитьАктивность(Активность);	
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиНаСервере(Сервис) 
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;

	НастройкиСИ = Новый НастройкиСервисаИнтеграции;
	НастройкиСИ.АдресВнешнегоСервисаИнтеграции = АдресВнешнегоСервисаИнтеграции;
	НастройкиСИ.ИмяПользователя = ИмяПользователя;
	НастройкиСИ.ИмяПользователяВнешнегоСервисаИнтеграции = ИмяПользователяВнешнегоСервисаИнтеграции;
	НастройкиСИ.ПарольПользователяВнешнегоСервисаИнтеграции = ПарольПользователяВнешнегоСервисаИнтеграции;
	
	СервисыИнтеграции[Сервис].УстановитьНастройки(НастройкиСИ);
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЭтотОбъект(ТекущийОбъект = Неопределено)
	
	Если ТекущийОбъект = Неопределено Тогда
		Возврат РеквизитФормыВЗначение("Объект");
	КонецЕсли; 
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	Возврат Неопределено;                
	
КонецФункции

#КонецОбласти


	